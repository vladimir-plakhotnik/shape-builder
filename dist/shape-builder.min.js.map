{"version":3,"file":"shape-builder.min.js","sources":["../src/models/Point.ts","../src/models/Line.ts","../src/models/Curve.ts","../src/models/Rectangle.ts","../src/models/Circle.ts","../src/models/Text.ts","../src/models/Builder.ts"],"sourcesContent":["export default class Point {\n    constructor(readonly x: number, readonly y: number) {}\n}\n","import Point from \"./Point\";\nimport { IDraw } from \"./IDraw\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, line: Line): void {\n    context.save();\n\n    if (line.options?.color) {\n        context.strokeStyle = line.options.color;\n    }\n\n    if (line.options?.thickness) {\n        context.lineWidth = line.options.thickness;\n    }\n    \n    if (line.options?.dash) {\n        context.setLineDash(line.options.dash);\n    }\n    \n    context.beginPath();\n\n    context.moveTo(line.start.x, line.start.y);\n\n    context.lineTo(line.end.x, line.end.y);\n\n    context.stroke();\n\n    context.closePath();\n\n    context.restore();\n}\n\nfunction svg(lineObject: Line): string {\n    let line = `x1=\"${lineObject.start.x}\" y1=\"${lineObject.start.y}\" x2=\"${lineObject.end.x}\" y2=\"${lineObject.end.y}\"`;       \n\n    if (lineObject.options?.color) {\n        line += ` stroke=\"${lineObject.options.color}\"`;\n    }\n\n    if (lineObject.options?.thickness) {\n        line += ` stroke-width=\"${lineObject.options.thickness}\"`;\n    }\n\n    if (lineObject.options?.dash) {\n        line += ` stroke-dasharray=\"${lineObject.options.dash.join(\",\")}\"`;\n    }\n\n    return `<line ${line} />`;\n}\n\nexport default class Line implements IDraw {\n    constructor(\n        public readonly start: Point, \n        public readonly end: Point,\n        public readonly options?: {\n            readonly color?: string,\n            readonly thickness?: number,\n            readonly dash?: number[]\n        }\n    ) {}\n\n    draw(): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this): svg(this);\n    }\n}\n","import { IDraw } from \"./IDraw\";\nimport Point from \"./Point\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, curve: Curve): void {\n    context.save();\n\n    if (curve.options?.fillColor) {\n        context.fillStyle = curve.options.fillColor;\n    }\n\n    if (curve.options?.borderColor) {\n        context.strokeStyle = curve.options.borderColor;\n    }\n\n    if (curve.options?.thickness) {\n        context.lineWidth = curve.options.thickness;\n    }\n    if (curve.options?.dash) {\n        context.setLineDash(curve.options.dash);\n    }\n    \n    const start = new Point(curve.points[0].x, curve.points[0].y);\n\n\n    context.beginPath();\n\n    \n    context.moveTo(start.x, start.y);    \n\n    for (let index = 1; index < curve.points.length; index++) { \n        const point = new Point (curve.points[index].x, curve.points[index].y);\n        context.lineTo(point.x, point.y);\n    }    \n\n    if (curve.options?.fillColor) {              \n        context.fill();\n    }\n\n    if (curve.options?.borderColor) {\n        context.stroke();\n    }\n    \n    context.closePath(); \n\n    context.restore();\n}\n\nfunction svg(curve: Curve): string {\n    let path = `M${curve.points[0].x} ${curve.points[0].y}`;\n\n    for (let index = 1; index < curve.points.length; index++) {\n        path += ` L${curve.points[index].x} ${curve.points[index].y}`;\n    }\n\n    path = `d=\"${path}\"`;\n\n    if (curve.options?.fillColor) {\n        path += ` fill=\"${curve.options.fillColor}\"`;\n    } else {\n        path += \" fill=\\\"none\\\"\";\n    }\n\n    if (curve.options?.borderColor) {\n        path += ` stroke=\"${curve.options.borderColor}\"`;\n    }\n\n    if (curve.options?.thickness) {\n        path += ` stroke-width=\"${curve.options.thickness}\"`;\n    }\n\n    if (curve.options?.dash) {\n        path += ` stroke-dasharray=\"${curve.options.dash.join(\",\")}\"`;\n    }\n\n    return `<path ${path} />`;\n}\n\nexport default class Curve implements IDraw {\n    constructor(\n        public readonly points: Point[],\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[]\n        }\n    ) {}\n\n    draw(): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this): svg(this);\n    }\n}\n","import Point from \"./Point\";\nimport { IDraw } from \"./IDraw\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, rectangle: Rectangle): void {\n    context.save();\n\n    if (rectangle.options?.fillColor) {\n        context.fillStyle = rectangle.options.fillColor;\n    }\n\n    if (rectangle.options?.borderColor) {\n        context.strokeStyle = rectangle.options.borderColor;\n    }\n\n    if (rectangle.options?.thickness) {\n        context.lineWidth = rectangle.options.thickness;\n    }\n    \n    if (rectangle.options?.dash) {\n        context.setLineDash(rectangle.options.dash);\n    }\n\n    if (rectangle.options?.fillColor) {\n        context.fillRect(rectangle.coordinates.x, rectangle.coordinates.y, rectangle.width, rectangle.height);\n    }\n    \n    if (rectangle.options?.borderColor) {\n        context.strokeRect(rectangle.coordinates.x, rectangle.coordinates.y, rectangle.width, rectangle.height);\n    }    \n\n    context.restore();\n}\n\nfunction svg(rectangle: Rectangle): string {\n    let rect = `x=\"${rectangle.coordinates.x}\" y=\"${rectangle.coordinates.y}\" width=\"${rectangle.width}\" height=\"${rectangle.height}\"`;\n\n    if (rectangle.options?.fillColor) {\n        rect += ` fill=\"${rectangle.options.fillColor}\"`;\n    } else {\n        rect += \" fill=\\\"none\\\"\";\n    }\n\n    if (rectangle.options?.borderColor) {\n        rect += ` stroke=\"${rectangle.options.borderColor}\"`;\n    }\n\n    if (rectangle.options?.thickness) {\n        rect += ` stroke-width=\"${rectangle.options.thickness}\"`;\n    }\n\n    if (rectangle.options?.dash) {\n        rect += ` stroke-dasharray=\"${rectangle.options.dash.join(\",\")}\"`;\n    }\n\n    return `<rect ${rect} />`;\n}\n\nexport default class Rectangle implements IDraw {\n    constructor(\n        public readonly coordinates: Point,\n        public readonly width: number, \n        public readonly height: number,\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[],\n        }\n    ) {}\n\n    public draw(): string;\n    public draw(context: CanvasRenderingContext2D): void;\n    public draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this): svg(this);\n    }\n}","import { IDraw } from \"./IDraw\";\nimport Point from \"./Point\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, circle: Circle): void {\n    context.save();\n\n    if (circle.options?.fillColor) {\n        context.fillStyle = circle.options.fillColor;\n    }\n    \n    if (circle.options?.borderColor) {\n        context.strokeStyle = circle.options.borderColor;\n    }\n\n    if (circle.options?.thickness) {\n        context.lineWidth = circle.options.thickness;\n    }\n        \n    if (circle.options?.dash) {\n        context.setLineDash(circle.options.dash);\n    }\n\n    context.beginPath();\n\n    context.arc(\n        circle.center.x, \n        circle.center.y,\n        circle.radius,\n        0,\n        2 * Math.PI,\n        false\n    );\n\n    context.closePath();\n\n    if (circle.options?.fillColor) {\n        context.fill();\n    }\n\n    context.stroke();\n\n    context.restore();\n}\n\nfunction svg(circleObject: Circle): string {\n    let circle = `cx=\"${circleObject.center.x}\" cy=\"${circleObject.center.y}\" r=\"${circleObject.radius}\"`;\n\n    if (circleObject.options?.fillColor) {\n        circle += ` fill=\"${circleObject.options.fillColor}\"`;            \n    } else {\n        circle += \" fill=\\\"none\\\"\";\n    }\n\n    if (circleObject.options?.borderColor) {\n        circle += ` stroke=\"${circleObject.options.borderColor}\"`;\n    }\n\n    if (circleObject.options?.thickness) {\n        circle += ` stroke-width=\"${circleObject.options.thickness}\"`;\n    }\n        \n    if (circleObject.options?.dash) {\n        circle += ` stroke-dasharray=\"${circleObject.options.dash.join(\",\")}\"`;\n    }\n\n    return `<circle ${circle} />`;\n}\n\nexport default class Circle implements IDraw {\n    constructor(\n        public readonly center: Point,\n        public readonly radius: number,\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[],\n        }\n    ) {}\n    draw(): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this): svg(this);\n    }\n    \n}","import { IDraw } from \"./IDraw\";\nimport Point from \"./Point\";\n\nexport interface IFontStyle {\n    family?: string,\n    size?: string,\n    weight?: string,\n    style?: string,\n    kerning?: CanvasFontKerning\n    stretch?: CanvasFontStretch,\n    variant?: CanvasFontVariantCaps,\n    lineHeight?: string\n}\n\nfunction fontStyleToString(fontStyle: IFontStyle): string {\n    let font = \"\";\n    if (fontStyle.style) {\n        font = `${fontStyle.style} `;\n    }\n    if (fontStyle.variant) {\n        font += `${fontStyle.variant} `;\n    }\n    if (fontStyle.weight) {\n        font += `${fontStyle.weight} `;\n    }\n    if (fontStyle.stretch) {\n        font += `${fontStyle.stretch} `;\n    }\n    if (fontStyle.size) {\n        font += `${fontStyle.size} `;\n    }    \n    if (fontStyle.lineHeight) {\n        font += `${fontStyle.lineHeight} `;\n    }\n    if (fontStyle.family) {\n        font += `${fontStyle.family}`;\n    }\n    return font.trim();\n}\n\nfunction drawingContext(context: CanvasRenderingContext2D, text: Text): void {\n    context.save();\n\n    if (text.options?.color) {\n        context.fillStyle = text.options.color;\n    }\n\n    if (text.options?.font) {\n        context.font = fontStyleToString(text.options.font);\n    }\n\n    if (text.options?.text) {\n        context.textAlign = text.options.text.align;\n        context.textBaseline = text.options.text.baseline;\n    }\n    \n    if (text.options?.rotate) {\n        context.translate(\n            text.coordinates.x,\n            text.coordinates.y\n        );\n        context.rotate(text.options.rotate * Math.PI / 180);\n        context.fillText(\n            text.text,\n            0,\n            0\n        );\n    } else {\n        context.fillText(\n            text.text,\n            text.coordinates.x,\n            text.coordinates.y\n        );\n    }\n    context.restore();\n}\n\nfunction svg(textObject: Text): string {\n    let text;\n        \n    if (textObject.options?.rotate) {\n        text = `x=\"0\" y=\"0\" transform=\"translate(${textObject.coordinates.x}, ${textObject.coordinates.y}) rotate(${textObject.options.rotate})\"`;\n    } else {\n        text = `x=\"${textObject.coordinates.x}\" y=\"${textObject.coordinates.y}\"`;\n    }\n\n    if (textObject.options?.color) {\n        text += ` fill=\"${textObject.options.color}\"`;\n    }\n\n    if (textObject.options?.font?.family) {\n        text += ` font-family=\"${textObject.options.font.family}\"`;\n    }\n\n    if (textObject.options?.font?.size) {\n        text += ` font-size=\"${textObject.options.font.size}\"`;\n    }\n\n    if (textObject.options?.font?.style) {\n        text += ` font-style=\"${textObject.options.font.style}\"`;\n    }\n\n    if (textObject.options?.font?.weight) {\n        text += ` font-weight=\"${textObject.options.font.weight}\"`;\n    }\n\n    if (textObject.options?.font?.variant) {\n        text += ` font-variant=\"${textObject.options.font.variant}\"`;\n    }\n\n    if (textObject.options?.font?.stretch) {\n        text += ` font-stretch=\"${textObject.options.font.stretch}\"`;\n    }\n\n    if (textObject.options?.font?.kerning) {\n        text += ` font-kerning=\"${textObject.options.font.kerning}\"`;\n    }\n\n    if (textObject.options?.text?.align) {\n        const align = textObject.options.text.align === \"center\" ? \"middle\" :  textObject.options.text.align;\n        text += ` text-anchor=\"${align}\"`;\n    }\n\n    if (textObject.options?.text?.baseline) {\n        text += ` dominant-baseline=\"${textObject.options.text.baseline}\"`;\n    }\n\n\n    \n    return `<text ${text}>${textObject.text}</text>`;\n}\n\nexport default class Text implements IDraw {\n    constructor(\n        public readonly coordinates: Point,\n        public readonly text: string,\n        public readonly options?: {\n            readonly color?: string,\n            readonly font?: IFontStyle,\n            readonly text?: {\n                align: CanvasTextAlign,\n                baseline: CanvasTextBaseline,\n            },\n            readonly rotate?: number\n        }\n    ) {}\n\n    draw(): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n    \n    static measure(\n        context: CanvasRenderingContext2D,\n        text: string,\n        font?: IFontStyle\n    ): TextMetrics {\n        if (font) {\n            context.save();\n            context.font = fontStyleToString(font);\n        }\n\n        const result = context.measureText(text);\n\n        if (font) {\n            context.restore();\n        }\n        \n        return result;\n    }\n\n    static fitIntoBox(\n        context: CanvasRenderingContext2D,\n        text: string,\n        boxSize: { width: number, height: number },\n        font?: IFontStyle\n    ): number {\n        context.save();\n    \n        if (font) {\n            context.font = fontStyleToString(font);\n        }\n\n        const fontString = context.font.split(\" \");\n\n        const index = fontString.findIndex(item => /\\d+px/.test(item.trim()));\n\n        if (index === -1) {\n            throw new Error(\"Font size does not found in an image context\");\n        }\n        \n        let number = parseInt(fontString[index]);\n    \n        if (!number) {\n            throw new Error(\"Font size does not found in an image context\");\n        }\n\n        const updateFont = () => {\n            fontString[index] = `${number}px`;\n            context.font = fontString.join(\" \");\n        };\n\n        const getTextWidth = (text: string) => context.measureText(text).width;\n\n        const getTextHeight = (text: string) => context.measureText(text).actualBoundingBoxAscent + context.measureText(text).actualBoundingBoxDescent;\n\n        if (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {            \n            // decrease            \n            while(getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n                number--;\n                updateFont();\n            }\n        } else {\n            // increase\n            while(getTextWidth(text) < boxSize.width && getTextHeight(text) < boxSize.height) {\n                number++;\n                updateFont();\n            }\n            if (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n                number--;\n            }\n        }\n        \n        context.restore();\n\n        return number;\n    }\n}\n","import { IDraw } from \"./IDraw\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, builder: Builder): void {\n    builder.shapes.forEach(shape => shape.draw(context));\n}\n\nfunction svg(width: number, height: number, builder: Builder): string {\n    const elements = <Array<string>>[];\n\n    builder.shapes.forEach(shape => elements.push(shape.draw()));\n\n    return `<svg width=\"${width}\" height=\"${height}\">${elements.join(\"\\n\")}</svg>`;\n}\nexport interface IBuilder {\n    draw(width: number, height: number): string;\n    draw(context: CanvasRenderingContext2D): void;\n}\n\nexport default class Builder implements IBuilder {\n    constructor(public readonly shapes: IDraw[]) {}\n\n    draw(width: number, height: number): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(width: number | CanvasRenderingContext2D, height?: number): string | void {\n        \n        if (typeof width === \"function\" ||  typeof width === \"object\") {\n            return drawingContext(width, this);\n        }\n\n        if (typeof width === \"number\" && typeof height === \"number\") {\n            return svg(width, height, this);\n        }\n\n        throw new TypeError(\"Wrong arguments.\");\n    }\n}\n"],"names":["Point","x","y","this","Line","start","end","options","prototype","draw","context","line","save","_a","color","strokeStyle","_b","thickness","lineWidth","_c","dash","setLineDash","beginPath","moveTo","lineTo","stroke","closePath","restore","drawingContext","concat","lineObject","join","Curve","points","curve","fillColor","fillStyle","borderColor","_d","index","length","point","_e","fill","_f","path","svg","Rectangle","coordinates","width","height","rectangle","fillRect","strokeRect","rect","Circle","center","radius","circle","arc","Math","PI","circleObject","fontStyleToString","fontStyle","font","style","variant","weight","stretch","size","lineHeight","family","trim","Text","text","textAlign","align","textBaseline","baseline","rotate","translate","fillText","textObject","_h","_g","_k","_j","_m","_l","_p","_o","_r","_q","kerning","_t","_s","_v","_u","measure","result","measureText","fitIntoBox","boxSize","fontString","split","findIndex","item","test","Error","number","parseInt","updateFont","getTextWidth","getTextHeight","actualBoundingBoxAscent","actualBoundingBoxDescent","Builder","shapes","forEach","shape","builder","elements","push","TypeError"],"mappings":"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"}