{"version":3,"file":"shape-builder.min.js","sources":["../src/models/Point.ts","../src/models/Line.ts","../src/models/Curve.ts","../src/models/Rectangle.ts","../src/models/Circle.ts","../src/models/Text.ts","../src/models/Builder.ts"],"sourcesContent":["/**\n * Point object is used to set a coordinate point\n */\nexport default class Point {\n    /**\n     * Creates an instance of a Point\n     * @param x X coordinate\n     * @param y Y coordinate\n     */\n    constructor(readonly x: number, readonly y: number) { }\n}\n","import Point from \"./Point\";\nimport { IDraw } from \"./IDraw\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, line: Line): void {\n    context.save();\n\n    if (line.options?.color) {\n        context.strokeStyle = line.options.color;\n    }\n\n    if (line.options?.thickness) {\n        context.lineWidth = line.options.thickness;\n    }\n\n    if (line.options?.dash) {\n        context.setLineDash(line.options.dash);\n    }\n\n    context.beginPath();\n\n    context.moveTo(line.start.x, line.start.y);\n\n    context.lineTo(line.end.x, line.end.y);\n\n    context.stroke();\n\n    context.closePath();\n\n    context.restore();\n}\n\nfunction svg(lineObject: Line): string {\n    let line = `x1=\"${lineObject.start.x}\" y1=\"${lineObject.start.y}\" x2=\"${lineObject.end.x}\" y2=\"${lineObject.end.y}\"`;\n\n    if (lineObject.options?.color) {\n        line += ` stroke=\"${lineObject.options.color}\"`;\n    }\n\n    if (lineObject.options?.thickness) {\n        line += ` stroke-width=\"${lineObject.options.thickness}\"`;\n    }\n\n    if (lineObject.options?.dash) {\n        line += ` stroke-dasharray=\"${lineObject.options.dash.join(\",\")}\"`;\n    }\n\n    return `<line ${line} />`;\n}\n\n/**\n * Line shape\n */\nexport default class Line implements IDraw {\n    /**\n     * Creates an instance of a Line shape\n     * @param start Start point coordinate\n     * @param end End point coordinate\n     * @param options Line drawing options\n     */\n    constructor(\n        public readonly start: Point,\n        public readonly end: Point,\n        public readonly options?: {\n            readonly color?: string,\n            readonly thickness?: number,\n            readonly dash?: number[]\n        }\n    ) { }\n\n    draw(): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n}\n","import { IDraw } from \"./IDraw\";\nimport Point from \"./Point\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, curve: Curve): void {\n    context.save();\n\n    if (curve.options?.fillColor) {\n        context.fillStyle = curve.options.fillColor;\n    }\n\n    if (curve.options?.borderColor) {\n        context.strokeStyle = curve.options.borderColor;\n    }\n\n    if (curve.options?.thickness) {\n        context.lineWidth = curve.options.thickness;\n    }\n    if (curve.options?.dash) {\n        context.setLineDash(curve.options.dash);\n    }\n\n    const start = new Point(curve.points[0].x, curve.points[0].y);\n\n\n    context.beginPath();\n\n\n    context.moveTo(start.x, start.y);\n\n    for (let index = 1; index < curve.points.length; index++) {\n        const point = new Point(curve.points[index].x, curve.points[index].y);\n        context.lineTo(point.x, point.y);\n    }\n\n    if (curve.options?.fillColor) {\n        context.fill();\n    }\n\n    if (curve.options?.borderColor) {\n        context.stroke();\n    }\n\n    context.closePath();\n\n    context.restore();\n}\n\nfunction svg(curve: Curve): string {\n    let path = `M${curve.points[0].x} ${curve.points[0].y}`;\n\n    for (let index = 1; index < curve.points.length; index++) {\n        path += ` L${curve.points[index].x} ${curve.points[index].y}`;\n    }\n\n    path = `d=\"${path}\"`;\n\n    if (curve.options?.fillColor) {\n        path += ` fill=\"${curve.options.fillColor}\"`;\n    } else {\n        path += \" fill=\\\"none\\\"\";\n    }\n\n    if (curve.options?.borderColor) {\n        path += ` stroke=\"${curve.options.borderColor}\"`;\n    }\n\n    if (curve.options?.thickness) {\n        path += ` stroke-width=\"${curve.options.thickness}\"`;\n    }\n\n    if (curve.options?.dash) {\n        path += ` stroke-dasharray=\"${curve.options.dash.join(\",\")}\"`;\n    }\n\n    return `<path ${path} />`;\n}\n\n/**\n * Curve shape\n */\nexport default class Curve implements IDraw {\n    /**\n     * Creates an instance of a Curve shape\n     * @param points Array of curve coordinate points\n     * @param options Curve drawing options\n     */\n    constructor(\n        public readonly points: Point[],\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[]\n        }\n    ) { }\n\n    draw(): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n}\n","import Point from \"./Point\";\nimport { IDraw } from \"./IDraw\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, rectangle: Rectangle): void {\n    context.save();\n\n    if (rectangle.options?.fillColor) {\n        context.fillStyle = rectangle.options.fillColor;\n    }\n\n    if (rectangle.options?.borderColor) {\n        context.strokeStyle = rectangle.options.borderColor;\n    }\n\n    if (rectangle.options?.thickness) {\n        context.lineWidth = rectangle.options.thickness;\n    }\n\n    if (rectangle.options?.dash) {\n        context.setLineDash(rectangle.options.dash);\n    }\n\n    if (rectangle.options?.fillColor) {\n        context.fillRect(rectangle.coordinates.x, rectangle.coordinates.y, rectangle.width, rectangle.height);\n    }\n\n    if (rectangle.options?.borderColor) {\n        context.strokeRect(rectangle.coordinates.x, rectangle.coordinates.y, rectangle.width, rectangle.height);\n    }\n\n    context.restore();\n}\n\nfunction svg(rectangle: Rectangle): string {\n\n    let x = rectangle.coordinates.x;\n    let width = rectangle.width;\n\n    if (width < 0) {\n        x += rectangle.width;\n        width = Math.abs(width);\n    }\n\n    let y = rectangle.coordinates.y;\n    let height = rectangle.height;\n\n    if (height < 0) {\n        y += rectangle.height;\n        height = Math.abs(height);\n    }\n\n    let rect = `x=\"${x}\" y=\"${y}\" width=\"${width}\" height=\"${height}\"`;\n\n    if (rectangle.options?.fillColor) {\n        rect += ` fill=\"${rectangle.options.fillColor}\"`;\n    } else {\n        rect += \" fill=\\\"none\\\"\";\n    }\n\n    if (rectangle.options?.borderColor) {\n        rect += ` stroke=\"${rectangle.options.borderColor}\"`;\n    }\n\n    if (rectangle.options?.thickness) {\n        rect += ` stroke-width=\"${rectangle.options.thickness}\"`;\n    }\n\n    if (rectangle.options?.dash) {\n        rect += ` stroke-dasharray=\"${rectangle.options.dash.join(\",\")}\"`;\n    }\n\n    return `<rect ${rect} />`;\n}\n\n/**\n * Rectangle shape\n */\nexport default class Rectangle implements IDraw {\n    /**\n     * Creates an instance of a Rectangle shape\n     * @param coordinates The coordinate of the upper left corner of Rectangle\n     * @param width Rectangle width\n     * @param height Rectangle height\n     * @param options Rectangle drawing options\n     */\n    constructor(\n        public readonly coordinates: Point,\n        public readonly width: number,\n        public readonly height: number,\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[],\n        }\n    ) { }\n\n    public draw(): string;\n    public draw(context: CanvasRenderingContext2D): void;\n    public draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n}","import { IDraw } from \"./IDraw\";\nimport Point from \"./Point\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, circle: Circle): void {\n    context.save();\n\n    if (circle.options?.fillColor) {\n        context.fillStyle = circle.options.fillColor;\n    }\n\n    if (circle.options?.borderColor) {\n        context.strokeStyle = circle.options.borderColor;\n    }\n\n    if (circle.options?.thickness) {\n        context.lineWidth = circle.options.thickness;\n    }\n\n    if (circle.options?.dash) {\n        context.setLineDash(circle.options.dash);\n    }\n\n    context.beginPath();\n\n    context.arc(\n        circle.center.x,\n        circle.center.y,\n        circle.radius,\n        0,\n        2 * Math.PI,\n        false\n    );\n\n    context.closePath();\n\n    if (circle.options?.fillColor) {\n        context.fill();\n    }\n\n    context.stroke();\n\n    context.restore();\n}\n\nfunction svg(circleObject: Circle): string {\n    let circle = `cx=\"${circleObject.center.x}\" cy=\"${circleObject.center.y}\" r=\"${circleObject.radius}\"`;\n\n    if (circleObject.options?.fillColor) {\n        circle += ` fill=\"${circleObject.options.fillColor}\"`;\n    } else {\n        circle += \" fill=\\\"none\\\"\";\n    }\n\n    if (circleObject.options?.borderColor) {\n        circle += ` stroke=\"${circleObject.options.borderColor}\"`;\n    }\n\n    if (circleObject.options?.thickness) {\n        circle += ` stroke-width=\"${circleObject.options.thickness}\"`;\n    }\n\n    if (circleObject.options?.dash) {\n        circle += ` stroke-dasharray=\"${circleObject.options.dash.join(\",\")}\"`;\n    }\n\n    return `<circle ${circle} />`;\n}\n\n/**\n * Circle shape\n */\nexport default class Circle implements IDraw {\n    /**\n     * Creates an instance of a Circle shape\n     * @param center Circle center coordinates\n     * @param radius Circle radius in degrees \n     * @param options Circle drawing options\n     */\n    constructor(\n        public readonly center: Point,\n        public readonly radius: number,\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[],\n        }\n    ) { }\n    draw(): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n\n}","import { IDraw } from \"./IDraw\";\nimport Point from \"./Point\";\n\nexport interface IFontStyle {\n    family?: string,\n    size?: string,\n    weight?: string,\n    style?: string,\n    kerning?: CanvasFontKerning\n    stretch?: CanvasFontStretch,\n    variant?: CanvasFontVariantCaps,\n    lineHeight?: string\n}\n\nfunction fontStyleToString(fontStyle: IFontStyle): string {\n    let font = \"\";\n    if (fontStyle.style) {\n        font = `${fontStyle.style} `;\n    }\n    if (fontStyle.variant) {\n        font += `${fontStyle.variant} `;\n    }\n    if (fontStyle.weight) {\n        font += `${fontStyle.weight} `;\n    }\n    if (fontStyle.stretch) {\n        font += `${fontStyle.stretch} `;\n    }\n    if (fontStyle.size) {\n        font += `${fontStyle.size} `;\n    }\n    if (fontStyle.lineHeight) {\n        font += `${fontStyle.lineHeight} `;\n    }\n    if (fontStyle.family) {\n        font += `${fontStyle.family}`;\n    }\n    return font.trim();\n}\n\nfunction drawingContext(context: CanvasRenderingContext2D, text: Text): void {\n    context.save();\n\n    if (text.options?.color) {\n        context.fillStyle = text.options.color;\n    }\n\n    if (text.options?.font) {\n        context.font = fontStyleToString(text.options.font);\n    }\n\n    if (text.options?.text) {\n        context.textAlign = text.options.text.align;\n        context.textBaseline = text.options.text.baseline;\n    }\n\n    if (text.options?.rotate) {\n        context.translate(\n            text.coordinates.x,\n            text.coordinates.y\n        );\n        context.rotate(text.options.rotate * Math.PI / 180);\n        context.fillText(\n            text.text,\n            0,\n            0\n        );\n    } else {\n        context.fillText(\n            text.text,\n            text.coordinates.x,\n            text.coordinates.y\n        );\n    }\n    context.restore();\n}\n\nfunction svg(textObject: Text): string {\n    let text;\n\n    if (textObject.options?.rotate) {\n        text = `x=\"0\" y=\"0\" transform=\"translate(${textObject.coordinates.x}, ${textObject.coordinates.y}) rotate(${textObject.options.rotate})\"`;\n    } else {\n        text = `x=\"${textObject.coordinates.x}\" y=\"${textObject.coordinates.y}\"`;\n    }\n\n    if (textObject.options?.color) {\n        text += ` fill=\"${textObject.options.color}\"`;\n    }\n\n    if (textObject.options?.font?.family) {\n        text += ` font-family=\"${textObject.options.font.family}\"`;\n    }\n\n    if (textObject.options?.font?.size) {\n        text += ` font-size=\"${textObject.options.font.size}\"`;\n    }\n\n    if (textObject.options?.font?.style) {\n        text += ` font-style=\"${textObject.options.font.style}\"`;\n    }\n\n    if (textObject.options?.font?.weight) {\n        text += ` font-weight=\"${textObject.options.font.weight}\"`;\n    }\n\n    if (textObject.options?.font?.variant) {\n        text += ` font-variant=\"${textObject.options.font.variant}\"`;\n    }\n\n    if (textObject.options?.font?.stretch) {\n        text += ` font-stretch=\"${textObject.options.font.stretch}\"`;\n    }\n\n    if (textObject.options?.font?.kerning) {\n        text += ` font-kerning=\"${textObject.options.font.kerning}\"`;\n    }\n\n    // text align\n\n    switch (textObject.options?.text?.align) {\n    case \"center\":\n        text += \" text-anchor=\\\"middle\\\"\";\n        break;\n    case \"right\":\n    case \"end\":\n        text += \" text-anchor=\\\"end\\\"\";\n        break;\n    default:\n        text += \" text-anchor=\\\"start\\\"\";\n    }\n\n    // text baseline\n\n    switch (textObject.options?.text?.baseline) {\n    case \"top\":\n    case \"hanging\":\n        text += \" dominant-baseline=\\\"hanging\\\"\";\n        break;\n    case \"alphabetic\":\n        text += \" dominant-baseline=\\\"alphabetic\\\"\";\n        break;\n    case \"ideographic\":\n        text += \" dominant-baseline=\\\"ideographic\\\"\";\n        break;\n    case \"middle\":\n        text += \" dominant-baseline=\\\"middle\\\"\";\n        break;\n    default:\n        text += \" dominant-baseline=\\\"auto\\\"\";\n    }\n\n    return `<text ${text}>${textObject.text}</text>`;\n}\n\n/**\n * Text shape\n */\nexport default class Text implements IDraw {\n    /**\n     * Creates an instance of a Text shape\n     * @param coordinates Text coordinates in a image\n     * @param text Text to draw in an image\n     * @param options Text drawing options\n     */\n    constructor(\n        public readonly coordinates: Point,\n        public readonly text: string,\n        public readonly options?: {\n            readonly color?: string,\n            readonly font?: IFontStyle,\n            readonly text?: {\n                align: CanvasTextAlign,\n                baseline: CanvasTextBaseline,\n            },\n            readonly rotate?: number\n        }\n    ) { }\n\n    draw(): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n\n    /**\n     * Mesures a text\n     * @param context The image context\n     * @param text Text to draw in the image\n     * @param font Font description\n     * @returns A {@link https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics TextMetrics} object \n     */\n    static measure(\n        context: CanvasRenderingContext2D,\n        text: string,\n        font?: IFontStyle\n    ): TextMetrics {\n        if (font) {\n            context.save();\n            context.font = fontStyleToString(font);\n        }\n\n        const result = context.measureText(text);\n\n        if (font) {\n            context.restore();\n        }\n\n        return result;\n    }\n\n    /**\n     * Fits a text into a box \n     * @param context The image context\n     * @param text Text to draw in a box\n     * @param boxSize Size of box in image\n     * @param font Font description\n     * @returns Font size to fit a text into a box\n     */\n    static fitIntoBox(\n        context: CanvasRenderingContext2D,\n        text: string,\n        boxSize: { width: number, height: number },\n        font?: IFontStyle\n    ): number {\n        context.save();\n\n        if (font) {\n            context.font = fontStyleToString(font);\n        }\n\n        const fontString = context.font.split(\" \");\n\n        const index = fontString.findIndex(item => /\\d+px/.test(item.trim()));\n\n        if (index === -1) {\n            throw new Error(\"Font size does not found in an image context\");\n        }\n\n        let number = parseInt(fontString[index]);\n\n        if (!number) {\n            throw new Error(\"Font size does not found in an image context\");\n        }\n\n        const updateFont = () => {\n            fontString[index] = `${number}px`;\n            context.font = fontString.join(\" \");\n        };\n\n        const getTextWidth = (text: string) => context.measureText(text).width;\n\n        const getTextHeight = (text: string) => context.measureText(text).actualBoundingBoxAscent + context.measureText(text).actualBoundingBoxDescent;\n\n        if (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n            // decrease            \n            while (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n                number--;\n                updateFont();\n            }\n        } else {\n            // increase\n            while (getTextWidth(text) < boxSize.width && getTextHeight(text) < boxSize.height) {\n                number++;\n                updateFont();\n            }\n            if (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n                number--;\n            }\n        }\n\n        context.restore();\n\n        return number;\n    }\n}\n","import { IDraw } from \"./IDraw\";\n\nexport interface IBuilder {\n    draw(width: number, height: number): string;\n    draw(context: CanvasRenderingContext2D): void;\n}\n\n/**\n * Shape builder\n */\nexport default class Builder implements IBuilder {\n\n    private shapes: IDraw[] = [];\n\n    /**\n     * Creates an instance of a shape builder\n     * @param shapes Shape array\n     */\n    constructor(shapes?: IDraw[]) {\n        if (shapes) {\n            this.shapes = shapes;\n        }\n    }\n\n    /**\n     * Adds a shape\n     * @param shapes The shapes\n     * @returns The shape builder\n     */\n    addShapes(...shapes: IDraw[]) {\n        this.shapes.push(...shapes);\n        return this;\n    }\n\n    /**\n     * Remove shapes from a shape builder\n     * @param quantity A quantity of shapes. Removes all shapes if the quantity is skipped\n     * @returns The shape builder\n     */\n    removeShapes(quantity?: number) {\n        if (quantity && this.shapes.length > quantity) {\n            this.shapes = this.shapes.slice(0, this.shapes.length - quantity);\n        } else {\n            this.shapes = [];\n        }\n        return this;\n    }\n\n    /**\n     * SVG image code \n     * @param width Image width\n     * @param height Image height\n     */\n    draw(width: number, height: number): string;\n    /**\n     * Draws image in context\n     * @param context Image context\n     */\n    draw(context: CanvasRenderingContext2D): void;\n    draw(widthOrContext: number | CanvasRenderingContext2D, height?: number): string | void {\n\n        if (typeof widthOrContext === \"function\" || typeof widthOrContext === \"object\") {\n            return this.shapes.forEach(shape => shape.draw(widthOrContext));\n        }\n\n        if (typeof widthOrContext === \"number\" && typeof height === \"number\") {\n            return `<svg width=\"${widthOrContext}\" height=\"${height}\">\\n${this.shapes.map(item => item.draw()).join(\"\\n\")}\\n</svg>`;\n        }\n\n        throw new TypeError(\"Wrong arguments.\");\n    }\n}\n"],"names":["Point","x","y","this","Line","start","end","options","prototype","draw","context","line","save","_a","color","strokeStyle","_b","thickness","lineWidth","_c","dash","setLineDash","beginPath","moveTo","lineTo","stroke","closePath","restore","drawingContext","concat","lineObject","join","Curve","points","curve","fillColor","fillStyle","borderColor","_d","index","length","point","_e","fill","_f","path","svg","Rectangle","coordinates","width","height","rectangle","fillRect","strokeRect","Math","abs","rect","Circle","center","radius","circle","arc","PI","circleObject","fontStyleToString","fontStyle","font","style","variant","weight","stretch","size","lineHeight","family","trim","Text","text","textAlign","align","textBaseline","baseline","rotate","translate","fillText","textObject","_h","_g","_k","_j","_m","_l","_p","_o","_r","_q","kerning","_t","_s","_v","_u","measure","result","measureText","fitIntoBox","boxSize","fontString","split","findIndex","item","test","Error","number","parseInt","updateFont","getTextWidth","getTextHeight","actualBoundingBoxAscent","actualBoundingBoxDescent","Builder","shapes","addShapes","_i","arguments","push","apply","removeShapes","quantity","slice","widthOrContext","forEach","shape","map","TypeError"],"mappings":"AAGA,IAAAA,EAMI,SAAqBC,EAAoBC,GAApBC,KAACF,EAADA,EAAoBE,KAACD,EAADA,CAAc,EC2C3D,IAAAE,EAAA,WAOI,SAAAA,EACoBC,EACAC,EACAC,GAFAJ,KAAKE,MAALA,EACAF,KAAGG,IAAHA,EACAH,KAAOI,QAAPA,CAKf,CAOT,OAHIH,EAAII,UAAAC,KAAJ,SAAKC,GACD,OAAOA,EArEf,SAAwBA,EAAmCC,aACvDD,EAAQE,QAEQ,UAAZD,EAAKJ,eAAO,IAAAM,OAAA,EAAAA,EAAEC,SACdJ,EAAQK,YAAcJ,EAAKJ,QAAQO,QAGvB,UAAZH,EAAKJ,eAAO,IAAAS,OAAA,EAAAA,EAAEC,aACdP,EAAQQ,UAAYP,EAAKJ,QAAQU,YAGrB,UAAZN,EAAKJ,eAAO,IAAAY,OAAA,EAAAA,EAAEC,OACdV,EAAQW,YAAYV,EAAKJ,QAAQa,MAGrCV,EAAQY,YAERZ,EAAQa,OAAOZ,EAAKN,MAAMJ,EAAGU,EAAKN,MAAMH,GAExCQ,EAAQc,OAAOb,EAAKL,IAAIL,EAAGU,EAAKL,IAAIJ,GAEpCQ,EAAQe,SAERf,EAAQgB,YAERhB,EAAQiB,SACZ,CA2CyBC,CAAelB,EAASP,OAxCzCQ,EAAO,OAAAkB,QADFC,EAyCgD3B,MAxC5BE,MAAMJ,EAAC,UAAA4B,OAASC,EAAWzB,MAAMH,EAAC,UAAA2B,OAASC,EAAWxB,IAAIL,EAAC,UAAA4B,OAASC,EAAWxB,IAAIJ,EAAC,MAE3F,UAAlB4B,EAAWvB,eAAO,IAAAM,OAAA,EAAAA,EAAEC,SACpBH,GAAQ,mBAAYmB,EAAWvB,QAAQO,aAGrB,UAAlBgB,EAAWvB,eAAO,IAAAS,OAAA,EAAAA,EAAEC,aACpBN,GAAQ,yBAAkBmB,EAAWvB,QAAQU,iBAG3B,UAAlBa,EAAWvB,eAAO,IAAAY,OAAA,EAAAA,EAAEC,QACpBT,GAAQ,sBAAAkB,OAAsBC,EAAWvB,QAAQa,KAAKW,KAAK,WAGxD,SAAAF,OAASlB,EAAI,QAfxB,IAAamB,QACLnB,GA0CPP,CAAD,ICMA,IAAA4B,EAAA,WAMI,SACoBA,EAAAC,EACA1B,GADAJ,KAAM8B,OAANA,EACA9B,KAAOI,QAAPA,CAMf,CAOT,OAHIyB,EAAIxB,UAAAC,KAAJ,SAAKC,GACD,OAAOA,EAhGf,SAAwBA,EAAmCwB,mBACvDxB,EAAQE,QAES,UAAbsB,EAAM3B,eAAO,IAAAM,OAAA,EAAAA,EAAEsB,aACfzB,EAAQ0B,UAAYF,EAAM3B,QAAQ4B,YAGrB,UAAbD,EAAM3B,eAAO,IAAAS,OAAA,EAAAA,EAAEqB,eACf3B,EAAQK,YAAcmB,EAAM3B,QAAQ8B,cAGvB,UAAbH,EAAM3B,eAAO,IAAAY,OAAA,EAAAA,EAAEF,aACfP,EAAQQ,UAAYgB,EAAM3B,QAAQU,YAErB,UAAbiB,EAAM3B,eAAO,IAAA+B,OAAA,EAAAA,EAAElB,OACfV,EAAQW,YAAYa,EAAM3B,QAAQa,MAGtC,IAAMf,EAAQ,IAAIL,EAAMkC,EAAMD,OAAO,GAAGhC,EAAGiC,EAAMD,OAAO,GAAG/B,GAG3DQ,EAAQY,YAGRZ,EAAQa,OAAOlB,EAAMJ,EAAGI,EAAMH,GAE9B,IAAK,IAAIqC,EAAQ,EAAGA,EAAQL,EAAMD,OAAOO,OAAQD,IAAS,CACtD,IAAME,EAAQ,IAAIzC,EAAMkC,EAAMD,OAAOM,GAAOtC,EAAGiC,EAAMD,OAAOM,GAAOrC,GACnEQ,EAAQc,OAAOiB,EAAMxC,EAAGwC,EAAMvC,EACjC,EAEgB,UAAbgC,EAAM3B,eAAO,IAAAmC,OAAA,EAAAA,EAAEP,YACfzB,EAAQiC,QAGK,UAAbT,EAAM3B,eAAO,IAAAqC,OAAA,EAAAA,EAAEP,cACf3B,EAAQe,SAGZf,EAAQgB,YAERhB,EAAQiB,SACZ,CAsDyBC,CAAelB,EAASP,MApDjD,SAAa+B,GAGT,gBAFIW,EAAO,IAAIhB,OAAAK,EAAMD,OAAO,GAAGhC,EAAK,KAAA4B,OAAAK,EAAMD,OAAO,GAAG/B,GAE3CqC,EAAQ,EAAGA,EAAQL,EAAMD,OAAOO,OAAQD,IAC7CM,GAAQ,YAAKX,EAAMD,OAAOM,GAAOtC,cAAKiC,EAAMD,OAAOM,GAAOrC,GAuB9D,OApBA2C,EAAO,MAAAhB,OAAMgB,EAAI,MAEA,UAAbX,EAAM3B,eAAO,IAAAM,OAAA,EAAAA,EAAEsB,WACfU,GAAQ,iBAAUX,EAAM3B,QAAQ4B,eAEhCU,GAAQ,gBAGK,UAAbX,EAAM3B,eAAO,IAAAS,OAAA,EAAAA,EAAEqB,eACfQ,GAAQ,mBAAYX,EAAM3B,QAAQ8B,mBAGrB,UAAbH,EAAM3B,eAAO,IAAAY,OAAA,EAAAA,EAAEF,aACf4B,GAAQ,yBAAkBX,EAAM3B,QAAQU,iBAG3B,UAAbiB,EAAM3B,eAAO,IAAA+B,OAAA,EAAAA,EAAElB,QACfyB,GAAQ,sBAAAhB,OAAsBK,EAAM3B,QAAQa,KAAKW,KAAK,WAGnD,SAAAF,OAASgB,EAAI,MACxB,CAwByDC,CAAI3C,OAE5D6B,CAAD,ICxBA,IAAAe,EAAA,WAQI,SAAAA,EACoBC,EACAC,EACAC,EACA3C,GAHAJ,KAAW6C,YAAXA,EACA7C,KAAK8C,MAALA,EACA9C,KAAM+C,OAANA,EACA/C,KAAOI,QAAPA,CAMf,CAOT,OAHWwC,EAAIvC,UAAAC,KAAX,SAAYC,GACR,OAAOA,EAjGf,SAAwBA,EAAmCyC,mBACvDzC,EAAQE,QAEa,UAAjBuC,EAAU5C,eAAO,IAAAM,OAAA,EAAAA,EAAEsB,aACnBzB,EAAQ0B,UAAYe,EAAU5C,QAAQ4B,YAGrB,UAAjBgB,EAAU5C,eAAO,IAAAS,OAAA,EAAAA,EAAEqB,eACnB3B,EAAQK,YAAcoC,EAAU5C,QAAQ8B,cAGvB,UAAjBc,EAAU5C,eAAO,IAAAY,OAAA,EAAAA,EAAEF,aACnBP,EAAQQ,UAAYiC,EAAU5C,QAAQU,YAGrB,UAAjBkC,EAAU5C,eAAO,IAAA+B,OAAA,EAAAA,EAAElB,OACnBV,EAAQW,YAAY8B,EAAU5C,QAAQa,OAGrB,UAAjB+B,EAAU5C,eAAO,IAAAmC,OAAA,EAAAA,EAAEP,YACnBzB,EAAQ0C,SAASD,EAAUH,YAAY/C,EAAGkD,EAAUH,YAAY9C,EAAGiD,EAAUF,MAAOE,EAAUD,SAG7E,UAAjBC,EAAU5C,eAAO,IAAAqC,OAAA,EAAAA,EAAEP,cACnB3B,EAAQ2C,WAAWF,EAAUH,YAAY/C,EAAGkD,EAAUH,YAAY9C,EAAGiD,EAAUF,MAAOE,EAAUD,QAGpGxC,EAAQiB,SACZ,CAqEyBC,CAAelB,EAASP,MAnEjD,SAAagD,eAELlD,EAAIkD,EAAUH,YAAY/C,EAC1BgD,EAAQE,EAAUF,MAElBA,EAAQ,IACRhD,GAAKkD,EAAUF,MACfA,EAAQK,KAAKC,IAAIN,IAGrB,IAAI/C,EAAIiD,EAAUH,YAAY9C,EAC1BgD,EAASC,EAAUD,OAEnBA,EAAS,IACThD,GAAKiD,EAAUD,OACfA,EAASI,KAAKC,IAAIL,IAGtB,IAAIM,EAAO,MAAA3B,OAAM5B,EAAC,SAAA4B,OAAQ3B,EAAC,aAAA2B,OAAYoB,EAAK,cAAApB,OAAaqB,EAAM,KAoB/D,OAlBqB,UAAjBC,EAAU5C,eAAO,IAAAM,OAAA,EAAAA,EAAEsB,WACnBqB,GAAQ,iBAAUL,EAAU5C,QAAQ4B,eAEpCqB,GAAQ,gBAGS,UAAjBL,EAAU5C,eAAO,IAAAS,OAAA,EAAAA,EAAEqB,eACnBmB,GAAQ,mBAAYL,EAAU5C,QAAQ8B,mBAGrB,UAAjBc,EAAU5C,eAAO,IAAAY,OAAA,EAAAA,EAAEF,aACnBuC,GAAQ,yBAAkBL,EAAU5C,QAAQU,iBAG3B,UAAjBkC,EAAU5C,eAAO,IAAA+B,OAAA,EAAAA,EAAElB,QACnBoC,GAAQ,sBAAA3B,OAAsBsB,EAAU5C,QAAQa,KAAKW,KAAK,WAGvD,SAAAF,OAAS2B,EAAI,MACxB,CA4ByDV,CAAI3C,OAE5D4C,CAAD,IC/BA,IAAAU,EAAA,WAOI,SAAAA,EACoBC,EACAC,EACApD,GAFAJ,KAAMuD,OAANA,EACAvD,KAAMwD,OAANA,EACAxD,KAAOI,QAAPA,CAMf,CAOT,OAJIkD,EAAIjD,UAAAC,KAAJ,SAAKC,GACD,OAAOA,EAxFf,SAAwBA,EAAmCkD,iBACvDlD,EAAQE,QAEU,UAAdgD,EAAOrD,eAAO,IAAAM,OAAA,EAAAA,EAAEsB,aAChBzB,EAAQ0B,UAAYwB,EAAOrD,QAAQ4B,YAGrB,UAAdyB,EAAOrD,eAAO,IAAAS,OAAA,EAAAA,EAAEqB,eAChB3B,EAAQK,YAAc6C,EAAOrD,QAAQ8B,cAGvB,UAAduB,EAAOrD,eAAO,IAAAY,OAAA,EAAAA,EAAEF,aAChBP,EAAQQ,UAAY0C,EAAOrD,QAAQU,YAGrB,UAAd2C,EAAOrD,eAAO,IAAA+B,OAAA,EAAAA,EAAElB,OAChBV,EAAQW,YAAYuC,EAAOrD,QAAQa,MAGvCV,EAAQY,YAERZ,EAAQmD,IACJD,EAAOF,OAAOzD,EACd2D,EAAOF,OAAOxD,EACd0D,EAAOD,OACP,EACA,EAAIL,KAAKQ,IACT,GAGJpD,EAAQgB,aAEU,UAAdkC,EAAOrD,eAAO,IAAAmC,OAAA,EAAAA,EAAEP,YAChBzB,EAAQiC,OAGZjC,EAAQe,SAERf,EAAQiB,SACZ,CAiDyBC,CAAelB,EAASP,OA9CzCyD,EAAS,OAAA/B,QADJkC,EA+CgD5D,MA9CxBuD,OAAOzD,EAAC,UAAA4B,OAASkC,EAAaL,OAAOxD,EAAC,SAAA2B,OAAQkC,EAAaJ,aAEpE,UAApBI,EAAaxD,eAAO,IAAAM,OAAA,EAAAA,EAAEsB,WACtByB,GAAU,iBAAUG,EAAaxD,QAAQ4B,eAEzCyB,GAAU,gBAGU,UAApBG,EAAaxD,eAAO,IAAAS,OAAA,EAAAA,EAAEqB,eACtBuB,GAAU,mBAAYG,EAAaxD,QAAQ8B,mBAGvB,UAApB0B,EAAaxD,eAAO,IAAAY,OAAA,EAAAA,EAAEF,aACtB2C,GAAU,yBAAkBG,EAAaxD,QAAQU,iBAG7B,UAApB8C,EAAaxD,eAAO,IAAA+B,OAAA,EAAAA,EAAElB,QACtBwC,GAAU,sBAAA/B,OAAsBkC,EAAaxD,QAAQa,KAAKW,KAAK,WAG5D,WAAAF,OAAW+B,EAAM,QArB5B,IAAaG,UACLH,GAiDPH,CAAD,IChFA,SAASO,EAAkBC,GACvB,IAAIC,EAAO,GAsBX,OArBID,EAAUE,QACVD,EAAO,GAAGrC,OAAAoC,EAAUE,YAEpBF,EAAUG,UACVF,GAAQ,GAAGrC,OAAAoC,EAAUG,cAErBH,EAAUI,SACVH,GAAQ,GAAGrC,OAAAoC,EAAUI,aAErBJ,EAAUK,UACVJ,GAAQ,GAAGrC,OAAAoC,EAAUK,cAErBL,EAAUM,OACVL,GAAQ,GAAGrC,OAAAoC,EAAUM,WAErBN,EAAUO,aACVN,GAAQ,GAAGrC,OAAAoC,EAAUO,iBAErBP,EAAUQ,SACVP,GAAQ,GAAGrC,OAAAoC,EAAUQ,SAElBP,EAAKQ,MAChB,CAwHA,IAAAC,EAAA,WAOI,SAAAA,EACoB3B,EACA4B,EACArE,GAFAJ,KAAW6C,YAAXA,EACA7C,KAAIyE,KAAJA,EACAzE,KAAOI,QAAPA,CASf,CAkGT,OA9FIoE,EAAInE,UAAAC,KAAJ,SAAKC,GACD,OAAOA,EA9If,SAAwBA,EAAmCkE,eACvDlE,EAAQE,QAEQ,UAAZgE,EAAKrE,eAAO,IAAAM,OAAA,EAAAA,EAAEC,SACdJ,EAAQ0B,UAAYwC,EAAKrE,QAAQO,QAGrB,UAAZ8D,EAAKrE,eAAO,IAAAS,OAAA,EAAAA,EAAEkD,QACdxD,EAAQwD,KAAOF,EAAkBY,EAAKrE,QAAQ2D,QAGlC,UAAZU,EAAKrE,eAAO,IAAAY,OAAA,EAAAA,EAAEyD,QACdlE,EAAQmE,UAAYD,EAAKrE,QAAQqE,KAAKE,MACtCpE,EAAQqE,aAAeH,EAAKrE,QAAQqE,KAAKI,WAG7B,UAAZJ,EAAKrE,eAAO,IAAA+B,OAAA,EAAAA,EAAE2C,SACdvE,EAAQwE,UACJN,EAAK5B,YAAY/C,EACjB2E,EAAK5B,YAAY9C,GAErBQ,EAAQuE,OAAOL,EAAKrE,QAAQ0E,OAAS3B,KAAKQ,GAAK,KAC/CpD,EAAQyE,SACJP,EAAKA,KACL,EACA,IAGJlE,EAAQyE,SACJP,EAAKA,KACLA,EAAK5B,YAAY/C,EACjB2E,EAAK5B,YAAY9C,GAGzBQ,EAAQiB,SACZ,CA2GyBC,CAAelB,EAASP,MAzGjD,SAAaiF,+CACLR,EA0CJ,OAvCIA,GADkB,UAAlBQ,EAAW7E,eAAO,IAAAM,OAAA,EAAAA,EAAEoE,QACb,2CAAoCG,EAAWpC,YAAY/C,eAAMmF,EAAWpC,YAAY9C,sBAAakF,EAAW7E,QAAQ0E,aAExH,MAAApD,OAAMuD,EAAWpC,YAAY/C,EAAS,SAAA4B,OAAAuD,EAAWpC,YAAY9C,QAGlD,UAAlBkF,EAAW7E,eAAO,IAAAS,OAAA,EAAAA,EAAEF,SACpB8D,GAAQ,iBAAUQ,EAAW7E,QAAQO,aAGX,QAA1BwB,EAAoB,UAApB8C,EAAW7E,eAAS,IAAAY,OAAA,EAAAA,EAAA+C,YAAM,IAAA5B,OAAA,EAAAA,EAAAmC,UAC1BG,GAAQ,iBAAiB/C,OAAAuD,EAAW7E,QAAQ2D,KAAKO,OAAM,OAG7B,QAA1B7B,EAAoB,UAApBwC,EAAW7E,eAAS,IAAAmC,OAAA,EAAAA,EAAAwB,YAAM,IAAAtB,OAAA,EAAAA,EAAA2B,QAC1BK,GAAQ,eAAe/C,OAAAuD,EAAW7E,QAAQ2D,KAAKK,KAAI,OAGzB,QAA1Bc,EAAoB,UAApBD,EAAW7E,eAAS,IAAA+E,OAAA,EAAAA,EAAApB,YAAM,IAAAmB,OAAA,EAAAA,EAAAlB,SAC1BS,GAAQ,gBAAgB/C,OAAAuD,EAAW7E,QAAQ2D,KAAKC,MAAK,OAG3B,QAA1BoB,EAAoB,UAApBH,EAAW7E,eAAS,IAAAiF,OAAA,EAAAA,EAAAtB,YAAM,IAAAqB,OAAA,EAAAA,EAAAlB,UAC1BO,GAAQ,iBAAiB/C,OAAAuD,EAAW7E,QAAQ2D,KAAKG,OAAM,OAG7B,QAA1BoB,EAAoB,UAApBL,EAAW7E,eAAS,IAAAmF,OAAA,EAAAA,EAAAxB,YAAM,IAAAuB,OAAA,EAAAA,EAAArB,WAC1BQ,GAAQ,kBAAkB/C,OAAAuD,EAAW7E,QAAQ2D,KAAKE,QAAO,OAG/B,QAA1BuB,EAAoB,UAApBP,EAAW7E,eAAS,IAAAqF,OAAA,EAAAA,EAAA1B,YAAM,IAAAyB,OAAA,EAAAA,EAAArB,WAC1BM,GAAQ,kBAAkB/C,OAAAuD,EAAW7E,QAAQ2D,KAAKI,QAAO,OAG/B,QAA1BuB,EAAoB,UAApBT,EAAW7E,eAAS,IAAAuF,OAAA,EAAAA,EAAA5B,YAAM,IAAA2B,OAAA,EAAAA,EAAAE,WAC1BnB,GAAQ,kBAAkB/C,OAAAuD,EAAW7E,QAAQ2D,KAAK6B,QAAO,MAK3B,QAA1BC,EAAoB,UAApBZ,EAAW7E,eAAS,IAAA0F,OAAA,EAAAA,EAAArB,YAAM,IAAAoB,OAAA,EAAAA,EAAAlB,OAClC,IAAK,SACDF,GAAQ,wBACR,MACJ,IAAK,QACL,IAAK,MACDA,GAAQ,qBACR,MACJ,QACIA,GAAQ,uBAKZ,OAAkC,QAA1BsB,EAAoB,UAApBd,EAAW7E,eAAS,IAAA4F,OAAA,EAAAA,EAAAvB,YAAM,IAAAsB,OAAA,EAAAA,EAAAlB,UAClC,IAAK,MACL,IAAK,UACDJ,GAAQ,+BACR,MACJ,IAAK,aACDA,GAAQ,kCACR,MACJ,IAAK,cACDA,GAAQ,mCACR,MACJ,IAAK,SACDA,GAAQ,8BACR,MACJ,QACIA,GAAQ,4BAGZ,MAAO,gBAASA,EAAI,KAAA/C,OAAIuD,EAAWR,eACvC,CA6ByD9B,CAAI3C,OAUlDwE,EAAAyB,QAAP,SACI1F,EACAkE,EACAV,GAEIA,IACAxD,EAAQE,OACRF,EAAQwD,KAAOF,EAAkBE,IAGrC,IAAMmC,EAAS3F,EAAQ4F,YAAY1B,GAMnC,OAJIV,GACAxD,EAAQiB,UAGL0E,GAWJ1B,EAAU4B,WAAjB,SACI7F,EACAkE,EACA4B,EACAtC,GAEAxD,EAAQE,OAEJsD,IACAxD,EAAQwD,KAAOF,EAAkBE,IAGrC,IAAMuC,EAAa/F,EAAQwD,KAAKwC,MAAM,KAEhCnE,EAAQkE,EAAWE,WAAU,SAAAC,GAAQ,MAAA,QAAQC,KAAKD,EAAKlC,OAAO,IAEpE,IAAe,IAAXnC,EACA,MAAM,IAAIuE,MAAM,gDAGpB,IAAIC,EAASC,SAASP,EAAWlE,IAEjC,IAAKwE,EACD,MAAM,IAAID,MAAM,gDAGpB,IAAMG,EAAa,WACfR,EAAWlE,GAAS,GAAGV,OAAAkF,QACvBrG,EAAQwD,KAAOuC,EAAW1E,KAAK,IACnC,EAEMmF,EAAe,SAACtC,GAAiB,OAAAlE,EAAQ4F,YAAY1B,GAAM3B,OAE3DkE,EAAgB,SAACvC,GAAiB,OAAAlE,EAAQ4F,YAAY1B,GAAMwC,wBAA0B1G,EAAQ4F,YAAY1B,GAAMyC,wBAA9E,EAExC,GAAIH,EAAatC,GAAQ4B,EAAQvD,OAASkE,EAAcvC,GAAQ4B,EAAQtD,OAEpE,KAAOgE,EAAatC,GAAQ4B,EAAQvD,OAASkE,EAAcvC,GAAQ4B,EAAQtD,QACvE6D,IACAE,QAED,CAEH,KAAOC,EAAatC,GAAQ4B,EAAQvD,OAASkE,EAAcvC,GAAQ4B,EAAQtD,QACvE6D,IACAE,KAEAC,EAAatC,GAAQ4B,EAAQvD,OAASkE,EAAcvC,GAAQ4B,EAAQtD,SACpE6D,GAEP,CAID,OAFArG,EAAQiB,UAEDoF,GAEdpC,CAAD,ICzQA2C,EAAA,WAQI,SAAAA,EAAYC,GANJpH,KAAMoH,OAAY,GAOlBA,IACApH,KAAKoH,OAASA,EAErB,CAiDL,OA1CID,EAAA9G,UAAAgH,UAAA,qBAA4BD,EAAA,GAAAE,EAAA,EAAlBA,EAAkBC,UAAAlF,OAAlBiF,IAAAF,EAAkBE,GAAAC,UAAAD,GAExB,OADA5G,EAAAV,KAAKoH,QAAOI,KAAQC,MAAA/G,EAAA0G,GACbpH,MAQXmH,EAAY9G,UAAAqH,aAAZ,SAAaC,GAMT,OALIA,GAAY3H,KAAKoH,OAAO/E,OAASsF,EACjC3H,KAAKoH,OAASpH,KAAKoH,OAAOQ,MAAM,EAAG5H,KAAKoH,OAAO/E,OAASsF,GAExD3H,KAAKoH,OAAS,GAEXpH,MAcXmH,EAAA9G,UAAAC,KAAA,SAAKuH,EAAmD9E,GAEpD,GAA8B,mBAAnB8E,GAA2D,iBAAnBA,EAC/C,OAAO7H,KAAKoH,OAAOU,SAAQ,SAAAC,GAAS,OAAAA,EAAMzH,KAAKuH,EAAe,IAGlE,GAA8B,iBAAnBA,GAAiD,iBAAX9E,EAC7C,MAAO,eAAerB,OAAAmG,EAA2B,cAAAnG,OAAAqB,EAAa,QAAArB,OAAA1B,KAAKoH,OAAOY,KAAI,SAAAvB,GAAQ,OAAAA,EAAKnG,MAAM,IAAEsB,KAAK,MAAK,YAGjH,MAAM,IAAIqG,UAAU,qBAE3Bd,CAAD"}