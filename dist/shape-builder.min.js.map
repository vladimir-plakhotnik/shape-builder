{"version":3,"file":"shape-builder.min.js","sources":["../src/models/Builder.ts","../src/models/Circle.ts","../src/models/Point.ts","../src/models/Curve.ts","../src/models/Line.ts","../src/models/Rectangle.ts","../src/models/Text.ts","../src/models/Transform.ts"],"sourcesContent":["import type { IBuilder, IDraw } from \"../interfaces\";\n\n/**\n * Shape builder\n */\nexport default class Builder implements IBuilder {\n\n    private shapes: IDraw[] = [];\n\n    /**\n     * Creates an instance of a shape builder\n     * @param shapes Shape array\n     */\n    constructor(shapes?: IDraw[]) {\n        if (shapes) {\n            this.shapes = shapes;\n        }\n    }\n\n    /**\n     * Adds a shape\n     * @param shape A shape\n     * @returns The shape builder\n     */\n    addShape(shape: IDraw) {\n        this.shapes.push(shape);\n        return this;\n    }\n\n    /**\n     * Adds a lot of shapes\n     * @param shapes The shapes\n     * @returns The shape builder\n     */\n    addShapes(...shapes: IDraw[]) {\n        this.shapes.push(...shapes);\n        return this;\n    }\n\n    /**\n     * Remove shapes from a shape builder\n     * @param quantity A quantity of shapes. Removes all shapes if the quantity is skipped\n     * @returns The shape builder\n     */\n    removeShapes(quantity?: number) {\n        if (quantity && this.shapes.length > quantity) {\n            this.shapes = this.shapes.slice(0, this.shapes.length - quantity);\n        } else {\n            this.shapes = [];\n        }\n        return this;\n    }\n\n    /**\n     * Creates SVG image code \n     * @param width Image width\n     * @param height Image height\n     */\n    draw(width: number, height: number): string;\n    /**\n     * Draws image in context\n     * @param context Image context\n     */\n    draw(context: CanvasRenderingContext2D): void;\n    draw(widthOrContext: number | CanvasRenderingContext2D, height?: number): string | void {\n\n        if (typeof widthOrContext === \"function\" || typeof widthOrContext === \"object\") {\n            return this.shapes.forEach(shape => shape.draw(widthOrContext));\n        }\n\n        if (typeof widthOrContext === \"number\" && typeof height === \"number\") {\n            return `<svg width=\"${widthOrContext}\" height=\"${height}\">\\n${this.shapes.map(item => item.draw()).join(\"\\n\")}\\n</svg>`;\n        }\n\n        throw new TypeError(\"Wrong arguments.\");\n    }\n}\n","import type { IDraw } from \"../interfaces\";\nimport Point from \"./Point\";\n\n/**\n * Draws a circle in a context\n * @param context Image context\n * @param circleShape Circle shape\n */\nfunction drawingContext(context: CanvasRenderingContext2D, circleShape: Circle): void {\n    context.save();\n\n    if (circleShape.options?.fillColor) {\n        context.fillStyle = circleShape.options.fillColor;\n    }\n\n    if (circleShape.options?.borderColor) {\n        context.strokeStyle = circleShape.options.borderColor;\n    }\n\n    if (circleShape.options?.thickness) {\n        context.lineWidth = circleShape.options.thickness;\n    }\n\n    if (circleShape.options?.dash) {\n        context.setLineDash(circleShape.options.dash);\n    }\n\n    context.beginPath();\n\n    context.arc(\n        circleShape.center.x,\n        circleShape.center.y,\n        circleShape.radius,\n        0,\n        2 * Math.PI,\n        false\n    );\n\n    context.closePath();\n\n    if (circleShape.options?.fillColor) {\n        context.fill();\n    }\n\n    context.stroke();\n\n    context.restore();\n}\n\n/**\n * Creates SVG image code of a circle\n * @param circleShape Circle shape\n * @returns SVG image code of a circle\n */\nfunction svg(circleShape: Circle): string {\n    let circle = `cx=\"${circleShape.center.x}\" cy=\"${circleShape.center.y}\" r=\"${circleShape.radius}\"`;\n\n    if (circleShape.options?.fillColor) {\n        circle += ` fill=\"${circleShape.options.fillColor}\"`;\n    } else {\n        circle += \" fill=\\\"none\\\"\";\n    }\n\n    if (circleShape.options?.borderColor) {\n        circle += ` stroke=\"${circleShape.options.borderColor}\"`;\n    }\n\n    if (circleShape.options?.thickness) {\n        circle += ` stroke-width=\"${circleShape.options.thickness}\"`;\n    }\n\n    if (circleShape.options?.dash) {\n        circle += ` stroke-dasharray=\"${circleShape.options.dash.join(\",\")}\"`;\n    }\n\n    return `<circle ${circle} />`;\n}\n\n/**\n * Circle shape\n */\nexport default class Circle implements IDraw {\n    /**\n     * Creates an instance of a Circle shape\n     * @param center Circle center coordinates\n     * @param radius Circle radius in degrees \n     * @param options Circle drawing options\n     */\n    constructor(\n        public readonly center: Point,\n        public readonly radius: number,\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[],\n        }\n    ) { }\n    /**\n     * Creates SVG image code of a circle\n     */\n    draw(): string;\n    /**\n     * Draws a circle in a context\n     * @param context Image context\n     */\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n}\n","/**\n * Point object is used to set a coordinate point\n */\nexport default class Point {\n    /**\n     * Creates an instance of a Point\n     * @param x X coordinate\n     * @param y Y coordinate\n     */\n    constructor(public readonly x: number, public readonly y: number) { }\n\n    /**\n     * Adds a point to the current one and returns a new point\n     * @param point A point object\n     * @returns New point\n     */\n    add(point: Point): Point {\n        return new Point(this.x + point.x, this.y + point.y);\n    }\n\n    /**\n     * Subtracts a point from the current one and returns a new point\n     * @param point A point object\n     * @returns New point\n     */\n    subtract(point: Point): Point {\n        return new Point(this.x - point.x, this.y - point.y);\n    }\n}\n","import type { IDraw } from \"../interfaces\";\nimport Point from \"./Point\";\n\n/**\n * Draws a curve in a context\n * @param context Image context\n * @param curve Curve shape\n */\nfunction drawingContext(context: CanvasRenderingContext2D, curve: Curve): void {\n    context.save();\n\n    if (curve.options?.fillColor) {\n        context.fillStyle = curve.options.fillColor;\n    }\n\n    if (curve.options?.borderColor) {\n        context.strokeStyle = curve.options.borderColor;\n    }\n\n    if (curve.options?.thickness) {\n        context.lineWidth = curve.options.thickness;\n    }\n    if (curve.options?.dash) {\n        context.setLineDash(curve.options.dash);\n    }\n\n    const start = new Point(curve.points[0].x, curve.points[0].y);\n\n    context.beginPath();\n\n    context.moveTo(start.x, start.y);\n\n    for (let index = 1; index < curve.points.length; index++) {\n        const point = new Point(curve.points[index].x, curve.points[index].y);\n        context.lineTo(point.x, point.y);\n    }\n\n    if (curve.options?.fillColor) {\n        context.fill();\n    }\n\n    if (curve.options?.borderColor) {\n        context.stroke();\n    }\n\n    context.closePath();\n\n    context.restore();\n}\n\n/**\n * Creates SVG image code of a curve\n * @param curve Curve shape\n * @returns SVG image code of a curve\n */\nfunction svg(curve: Curve): string {\n    let path = `M${curve.points[0].x} ${curve.points[0].y}`;\n\n    for (let index = 1; index < curve.points.length; index++) {\n        path += ` L${curve.points[index].x} ${curve.points[index].y}`;\n    }\n\n    path = `d=\"${path}\"`;\n\n    if (curve.options?.fillColor) {\n        path += ` fill=\"${curve.options.fillColor}\"`;\n    } else {\n        path += \" fill=\\\"none\\\"\";\n    }\n\n    if (curve.options?.borderColor) {\n        path += ` stroke=\"${curve.options.borderColor}\"`;\n    }\n\n    if (curve.options?.thickness) {\n        path += ` stroke-width=\"${curve.options.thickness}\"`;\n    }\n\n    if (curve.options?.dash) {\n        path += ` stroke-dasharray=\"${curve.options.dash.join(\",\")}\"`;\n    }\n\n    return `<path ${path} />`;\n}\n\n/**\n * Curve shape\n */\nexport default class Curve implements IDraw {\n    /**\n     * Creates an instance of a Curve shape\n     * @param points Array of curve coordinate points\n     * @param options Curve drawing options\n     */\n    constructor(\n        public readonly points: Point[],\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[]\n        }\n    ) { }\n\n    /**\n     * Creates SVG image code of a curve\n     */\n    draw(): string;\n    /**\n     * Draws a curve in a context\n     * @param context Image context\n     */\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n}\n","import type { IDraw } from \"../interfaces\";\nimport type Point from \"./Point\";\n\n/**\n * Draws a line in a context\n * @param context Image context\n * @param lineShape Line shape\n */\nfunction drawingContext(context: CanvasRenderingContext2D, lineShape: Line): void {\n    context.save();\n\n    if (lineShape.options?.color) {\n        context.strokeStyle = lineShape.options.color;\n    }\n\n    if (lineShape.options?.thickness) {\n        context.lineWidth = lineShape.options.thickness;\n    }\n\n    if (lineShape.options?.dash) {\n        context.setLineDash(lineShape.options.dash);\n    }\n\n    context.beginPath();\n\n    context.moveTo(lineShape.start.x, lineShape.start.y);\n\n    context.lineTo(lineShape.end.x, lineShape.end.y);\n\n    context.stroke();\n\n    context.closePath();\n\n    context.restore();\n}\n\n/**\n * Creates SVG image code of a line\n * @param lineShape Line shape\n * @returns SVG image code of a line\n */\nfunction svg(lineShape: Line): string {\n    let line = `x1=\"${lineShape.start.x}\" y1=\"${lineShape.start.y}\" x2=\"${lineShape.end.x}\" y2=\"${lineShape.end.y}\"`;\n\n    if (lineShape.options?.color) {\n        line += ` stroke=\"${lineShape.options.color}\"`;\n    }\n\n    if (lineShape.options?.thickness) {\n        line += ` stroke-width=\"${lineShape.options.thickness}\"`;\n    }\n\n    if (lineShape.options?.dash) {\n        line += ` stroke-dasharray=\"${lineShape.options.dash.join(\",\")}\"`;\n    }\n\n    return `<line ${line} />`;\n}\n\n/**\n * Line shape\n */\nexport default class Line implements IDraw {\n    /**\n     * Creates an instance of a Line shape\n     * @param start Start point coordinate\n     * @param end End point coordinate\n     * @param options Line drawing options\n     */\n    constructor(\n        public readonly start: Point,\n        public readonly end: Point,\n        public readonly options?: {\n            readonly color?: string,\n            readonly thickness?: number,\n            readonly dash?: number[]\n        }\n    ) { }\n\n    /**\n     * Creates SVG image code of a line\n     */\n    draw(): string;\n    /**\n     * Draws a line in a context\n     * @param context Image context\n     */\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n}\n","import type { IDraw } from \"../interfaces/IDraw\";\nimport type Point from \"./Point\";\n\n/**\n * Draws a rectangle in a context\n * @param context Image context\n * @param rectangle Rectangle shape\n */\nfunction drawingContext(context: CanvasRenderingContext2D, rectangle: Rectangle): void {\n    context.save();\n\n    if (rectangle.options?.fillColor) {\n        context.fillStyle = rectangle.options.fillColor;\n    }\n\n    if (rectangle.options?.borderColor) {\n        context.strokeStyle = rectangle.options.borderColor;\n    }\n\n    if (rectangle.options?.thickness) {\n        context.lineWidth = rectangle.options.thickness;\n    }\n\n    if (rectangle.options?.dash) {\n        context.setLineDash(rectangle.options.dash);\n    }\n\n    if (rectangle.options?.fillColor) {\n        context.fillRect(rectangle.coordinates.x, rectangle.coordinates.y, rectangle.width, rectangle.height);\n    }\n\n    if (rectangle.options?.borderColor) {\n        context.strokeRect(rectangle.coordinates.x, rectangle.coordinates.y, rectangle.width, rectangle.height);\n    }\n\n    context.restore();\n}\n\n/**\n * Creates SVG image code of a rectangle\n * @param rectangle Rectangle shape\n * @returns SVG image code of a rectangle\n */\nfunction svg(rectangle: Rectangle): string {\n\n    let x = rectangle.coordinates.x;\n    let width = rectangle.width;\n\n    if (width < 0) {\n        x += rectangle.width;\n        width = Math.abs(width);\n    }\n\n    let y = rectangle.coordinates.y;\n    let height = rectangle.height;\n\n    if (height < 0) {\n        y += rectangle.height;\n        height = Math.abs(height);\n    }\n\n    let rect = `x=\"${x}\" y=\"${y}\" width=\"${width}\" height=\"${height}\"`;\n\n    if (rectangle.options?.fillColor) {\n        rect += ` fill=\"${rectangle.options.fillColor}\"`;\n    } else {\n        rect += \" fill=\\\"none\\\"\";\n    }\n\n    if (rectangle.options?.borderColor) {\n        rect += ` stroke=\"${rectangle.options.borderColor}\"`;\n    }\n\n    if (rectangle.options?.thickness) {\n        rect += ` stroke-width=\"${rectangle.options.thickness}\"`;\n    }\n\n    if (rectangle.options?.dash) {\n        rect += ` stroke-dasharray=\"${rectangle.options.dash.join(\",\")}\"`;\n    }\n\n    return `<rect ${rect} />`;\n}\n\n/**\n * Rectangle shape\n */\nexport default class Rectangle implements IDraw {\n    /**\n     * Creates an instance of a Rectangle shape\n     * @param coordinates The coordinate of the upper left corner of Rectangle\n     * @param width Rectangle width\n     * @param height Rectangle height\n     * @param options Rectangle drawing options\n     */\n    constructor(\n        public readonly coordinates: Point,\n        public readonly width: number,\n        public readonly height: number,\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[],\n        }\n    ) { }\n\n    /**\n     * Creates SVG image code of a rectangle\n     */\n    public draw(): string;\n    /**\n     *  Creates SVG image code of a rectangle\n     * @param context Image context\n     */\n    public draw(context: CanvasRenderingContext2D): void;\n    public draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n}\n","import { IFontStyle, IDraw } from \"../interfaces\";\nimport type Point from \"./Point\";\n\n/**\n * Converts font style object to string\n * @param fontStyle Font style object\n * @returns Font style string\n */\nfunction fontStyleToString(fontStyle: IFontStyle): string {\n    let font = \"\";\n    if (fontStyle.style) {\n        font = `${fontStyle.style} `;\n    }\n    if (fontStyle.variant) {\n        font += `${fontStyle.variant} `;\n    }\n    if (fontStyle.weight) {\n        font += `${fontStyle.weight} `;\n    }\n    if (fontStyle.stretch) {\n        font += `${fontStyle.stretch} `;\n    }\n    if (fontStyle.size) {\n        font += `${fontStyle.size} `;\n    }\n    if (fontStyle.lineHeight) {\n        font += `${fontStyle.lineHeight} `;\n    }\n    if (fontStyle.family) {\n        font += `${fontStyle.family}`;\n    }\n    return font.trim();\n}\n\n/**\n * Draws a text in a context\n * @param context Image context\n * @param textShape Text shape\n */\nfunction drawingContext(context: CanvasRenderingContext2D, textShape: Text): void {\n    context.save();\n\n    if (textShape.options?.color) {\n        context.fillStyle = textShape.options.color;\n    }\n\n    if (textShape.options?.font) {\n        context.font = fontStyleToString(textShape.options.font);\n    }\n\n    if (textShape.options?.text) {\n        context.textAlign = textShape.options.text.align;\n        context.textBaseline = textShape.options.text.baseline;\n    }\n\n    if (textShape.options?.rotate) {\n        context.translate(\n            textShape.coordinates.x,\n            textShape.coordinates.y\n        );\n        context.rotate(textShape.options.rotate * Math.PI / 180);\n        context.fillText(\n            textShape.text,\n            0,\n            0\n        );\n    } else {\n        context.fillText(\n            textShape.text,\n            textShape.coordinates.x,\n            textShape.coordinates.y\n        );\n    }\n    context.restore();\n}\n\n/**\n * Creates SVG image code of a text\n * @param textShape Text shape\n * @returns SVG image code of a text\n */\nfunction svg(textShape: Text): string {\n    let text;\n\n    if (textShape.options?.rotate) {\n        text = `x=\"0\" y=\"0\" transform=\"translate(${textShape.coordinates.x}, ${textShape.coordinates.y}) rotate(${textShape.options.rotate})\"`;\n    } else {\n        text = `x=\"${textShape.coordinates.x}\" y=\"${textShape.coordinates.y}\"`;\n    }\n\n    if (textShape.options?.color) {\n        text += ` fill=\"${textShape.options.color}\"`;\n    }\n\n    if (textShape.options?.font?.family) {\n        text += ` font-family=\"${textShape.options.font.family}\"`;\n    }\n\n    if (textShape.options?.font?.size) {\n        text += ` font-size=\"${textShape.options.font.size}\"`;\n    }\n\n    if (textShape.options?.font?.style) {\n        text += ` font-style=\"${textShape.options.font.style}\"`;\n    }\n\n    if (textShape.options?.font?.weight) {\n        text += ` font-weight=\"${textShape.options.font.weight}\"`;\n    }\n\n    if (textShape.options?.font?.variant) {\n        text += ` font-variant=\"${textShape.options.font.variant}\"`;\n    }\n\n    if (textShape.options?.font?.stretch) {\n        text += ` font-stretch=\"${textShape.options.font.stretch}\"`;\n    }\n\n    if (textShape.options?.font?.kerning) {\n        text += ` font-kerning=\"${textShape.options.font.kerning}\"`;\n    }\n\n    // text align\n\n    switch (textShape.options?.text?.align) {\n    case \"center\":\n        text += \" text-anchor=\\\"middle\\\"\";\n        break;\n    case \"right\":\n    case \"end\":\n        text += \" text-anchor=\\\"end\\\"\";\n        break;\n    default:\n        text += \" text-anchor=\\\"start\\\"\";\n    }\n\n    // text baseline\n\n    switch (textShape.options?.text?.baseline) {\n    case \"top\":\n    case \"hanging\":\n        text += \" dominant-baseline=\\\"hanging\\\"\";\n        break;\n    case \"alphabetic\":\n        text += \" dominant-baseline=\\\"alphabetic\\\"\";\n        break;\n    case \"ideographic\":\n        text += \" dominant-baseline=\\\"ideographic\\\"\";\n        break;\n    case \"middle\":\n        text += \" dominant-baseline=\\\"middle\\\"\";\n        break;\n    default:\n        text += \" dominant-baseline=\\\"auto\\\"\";\n    }\n\n    return `<text ${text}>${textShape.text}</text>`;\n}\n\n/**\n * Text shape\n */\nexport default class Text implements IDraw {\n    /**\n     * Creates an instance of a Text shape\n     * @param coordinates Text coordinates in a image\n     * @param text Text to draw in an image\n     * @param options Text drawing options\n     */\n    constructor(\n        public readonly coordinates: Point,\n        public readonly text: string,\n        public readonly options?: {\n            readonly color?: string,\n            readonly font?: IFontStyle,\n            readonly text?: {\n                align: CanvasTextAlign,\n                baseline: CanvasTextBaseline,\n            },\n            readonly rotate?: number\n        }\n    ) { }\n\n    /**\n     * Creates SVG image code of a text\n     */\n    draw(): string;\n    /**\n     * Creates SVG image code of a text\n     * @param context Image context\n     */\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n\n    /**\n     * Measures a text\n     * @param context The image context\n     * @param text Text to draw in the image\n     * @param font Font description\n     * @returns A {@link https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics TextMetrics} object \n     */\n    static measure(\n        context: CanvasRenderingContext2D,\n        text: string,\n        font?: IFontStyle\n    ): TextMetrics {\n        if (font) {\n            context.save();\n            context.font = fontStyleToString(font);\n        }\n\n        const result = context.measureText(text);\n\n        if (font) {\n            context.restore();\n        }\n\n        return result;\n    }\n\n    /**\n     * Fits a text into a box \n     * @param context The image context\n     * @param text Text to draw in a box\n     * @param boxSize Size of box in image\n     * @param font Font description\n     * @returns Font size to fit a text into a box\n     */\n    static fitIntoBox(\n        context: CanvasRenderingContext2D,\n        text: string,\n        boxSize: { width: number, height: number },\n        font?: IFontStyle\n    ): number {\n        context.save();\n\n        if (font) {\n            context.font = fontStyleToString(font);\n        }\n\n        const fontString = context.font.split(\" \");\n\n        const index = fontString.findIndex(item => /\\d+px/.test(item.trim()));\n\n        if (index === -1) {\n            throw new Error(\"Font size does not found in an image context\");\n        }\n\n        let number = parseInt(fontString[index]);\n\n        if (!number) {\n            throw new Error(\"Font size does not found in an image context\");\n        }\n\n        const updateFont = () => {\n            fontString[index] = `${number}px`;\n            context.font = fontString.join(\" \");\n        };\n\n        const getTextWidth = (text: string) => context.measureText(text).width;\n\n        const getTextHeight = (text: string) => context.measureText(text).actualBoundingBoxAscent + context.measureText(text).actualBoundingBoxDescent;\n\n        if (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n            // decrease            \n            while (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n                number--;\n                updateFont();\n            }\n        } else {\n            // increase\n            while (getTextWidth(text) < boxSize.width && getTextHeight(text) < boxSize.height) {\n                number++;\n                updateFont();\n            }\n            if (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n                number--;\n            }\n        }\n\n        context.restore();\n\n        return number;\n    }\n}\n","/**\n * Transform Record Object\n */\nexport default class Transform {\n\n    constructor(public readonly object: Record<string, unknown>) { }\n\n    /**\n     * Filters properties\n     * @param properties Array of excluded properties\n     * @returns Filtered object\n     */\n    exclude(properties: string[]): Record<string, unknown> {\n        return Object.keys(this.object)\n            .filter((property) => !properties.includes(property))\n            .reduce((result, property) => {\n                result[property] = this.object[property];\n                return result;\n            }, {} as Record<string, unknown>);\n    }\n\n    /**\n     * Filters properties\n     * @param properties List of allowed properties\n     * @returns Filtered object\n     */\n    include(properties: string[]): Record<string, unknown> {\n        return Object.keys(this.object)\n            .filter((property) => properties.includes(property))\n            .reduce((result, property) => {\n                result[property] = this.object[property];\n                return result;\n            }, {} as Record<string, unknown>);\n    }\n\n    /**\n     * Stringify object\n     * @returns Text\n     */\n    stringify(): string {\n        let result = \"\";\n        for (const property in this.object) {\n            result += `${property}:${this.object[property]}; `;\n        }\n        return result.trim();\n    }\n\n    /**\n     * Stringify object values\n     * @returns Text\n     */\n    values(): string {\n        let result = \"\";\n        for (const property in this.object) {\n            result += `${this.object[property]} `;\n        }\n        return result.trim();\n    }\n\n    /**\n     * Parses text\n     * @param text Source text\n     * @returns Parsed object\n     */\n    static parse(text: string): Record<string, unknown> {\n        const pairs = text.trim().split(\";\").map(item => item.trim());\n        const object: Record<string, unknown> = {};\n        for (const pair of pairs) {\n            const [key, value] = pair.split(\":\").map(item => item.trim());\n            object[key] = value;\n        }\n        return object;\n    }\n}\n"],"names":["Builder","shapes","this","prototype","addShape","shape","push","addShapes","_i","arguments","length","_a","apply","removeShapes","quantity","slice","draw","widthOrContext","height","forEach","concat","map","item","join","TypeError","Circle","center","radius","options","context","circleShape","save","fillColor","fillStyle","_b","borderColor","strokeStyle","_c","thickness","lineWidth","_d","dash","setLineDash","beginPath","arc","x","y","Math","PI","closePath","_e","fill","stroke","restore","drawingContext","circle","Point","add","point","subtract","Curve","points","curve","start","moveTo","index","lineTo","_f","path","svg","Line","end","lineShape","color","line","Rectangle","coordinates","width","rectangle","fillRect","strokeRect","abs","rect","fontStyleToString","fontStyle","font","style","variant","weight","stretch","size","lineHeight","family","trim","Text","text","textShape","textAlign","align","textBaseline","baseline","rotate","translate","fillText","_h","_g","_k","_j","_m","_l","_p","_o","_r","_q","kerning","_t","_s","_v","_u","measure","result","measureText","fitIntoBox","boxSize","fontString","split","findIndex","test","Error","number","parseInt","updateFont","getTextWidth","getTextHeight","actualBoundingBoxAscent","actualBoundingBoxDescent","Transform","object","exclude","properties","_this","Object","keys","filter","property","includes","reduce","include","stringify","values","parse","pairs_1","key","value"],"mappings":"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"}