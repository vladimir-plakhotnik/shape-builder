{"version":3,"file":"shape-builder.node.js","sources":["../src/shapes/Circle.ts","../src/shapes/Point.ts","../src/shapes/Curve.ts","../src/shapes/Line.ts","../src/shapes/Rectangle.ts","../src/shapes/Text.ts","../src/Transform.ts","../src/Builder.ts"],"sourcesContent":["import type { IDraw } from \"../interfaces\";\nimport Point from \"./Point\";\n\n/**\n * Draws a circle in a context\n * @param context Image context\n * @param circleShape Circle shape\n */\nfunction drawingContext(context: CanvasRenderingContext2D, circleShape: Circle): void {\n    context.save();\n\n    if (circleShape.options?.fillColor) {\n        context.fillStyle = circleShape.options.fillColor;\n    }\n\n    if (circleShape.options?.borderColor) {\n        context.strokeStyle = circleShape.options.borderColor;\n    }\n\n    if (circleShape.options?.thickness) {\n        context.lineWidth = circleShape.options.thickness;\n    }\n\n    if (circleShape.options?.dash) {\n        context.setLineDash(circleShape.options.dash);\n    }\n\n    context.beginPath();\n\n    context.arc(\n        circleShape.center.x,\n        circleShape.center.y,\n        circleShape.radius,\n        0,\n        2 * Math.PI,\n        false\n    );\n\n    context.closePath();\n\n    if (circleShape.options?.fillColor) {\n        context.fill();\n    }\n\n    context.stroke();\n\n    context.restore();\n}\n\n/**\n * Creates SVG image code of a circle\n * @param circleShape Circle shape\n * @returns SVG image code of a circle\n */\nfunction svg(circleShape: Circle): string {\n    let circle = `cx=\"${circleShape.center.x}\" cy=\"${circleShape.center.y}\" r=\"${circleShape.radius}\"`;\n\n    if (circleShape.options?.fillColor) {\n        circle += ` fill=\"${circleShape.options.fillColor}\"`;\n    } else {\n        circle += \" fill=\\\"none\\\"\";\n    }\n\n    if (circleShape.options?.borderColor) {\n        circle += ` stroke=\"${circleShape.options.borderColor}\"`;\n    }\n\n    if (circleShape.options?.thickness) {\n        circle += ` stroke-width=\"${circleShape.options.thickness}\"`;\n    }\n\n    if (circleShape.options?.dash) {\n        circle += ` stroke-dasharray=\"${circleShape.options.dash.join(\",\")}\"`;\n    }\n\n    return `<circle ${circle} />`;\n}\n\n/**\n * Circle shape\n */\nexport default class Circle implements IDraw {\n    /**\n     * Creates an instance of a Circle shape\n     * @param center Circle center coordinates\n     * @param radius Circle radius in degrees \n     * @param options Circle drawing options\n     */\n    constructor(\n        public readonly center: Point,\n        public readonly radius: number,\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[],\n        }\n    ) { }\n    /**\n     * Creates SVG image code of a circle\n     */\n    draw(): string;\n    /**\n     * Draws a circle in a context\n     * @param context Image context\n     */\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n}\n","/**\n * Point object is used to set a coordinate point\n */\nexport default class Point {\n    /**\n     * Creates an instance of a Point\n     * @param x X coordinate\n     * @param y Y coordinate\n     */\n    constructor(public readonly x: number, public readonly y: number) { }\n\n    /**\n     * Adds a point to the current one and returns a new point\n     * @param point A point object\n     * @returns New point\n     */\n    add(point: Point): Point {\n        return new Point(this.x + point.x, this.y + point.y);\n    }\n\n    /**\n     * Subtracts a point from the current one and returns a new point\n     * @param point A point object\n     * @returns New point\n     */\n    subtract(point: Point): Point {\n        return new Point(this.x - point.x, this.y - point.y);\n    }\n}\n","import type { IDraw } from \"../interfaces\";\nimport Point from \"./Point\";\n\n/**\n * Draws a curve in a context\n * @param context Image context\n * @param curve Curve shape\n */\nfunction drawingContext(context: CanvasRenderingContext2D, curve: Curve): void {\n    context.save();\n\n    if (curve.options?.fillColor) {\n        context.fillStyle = curve.options.fillColor;\n    }\n\n    if (curve.options?.borderColor) {\n        context.strokeStyle = curve.options.borderColor;\n    }\n\n    if (curve.options?.thickness) {\n        context.lineWidth = curve.options.thickness;\n    }\n    if (curve.options?.dash) {\n        context.setLineDash(curve.options.dash);\n    }\n\n    const start = new Point(curve.points[0].x, curve.points[0].y);\n\n    context.beginPath();\n\n    context.moveTo(start.x, start.y);\n\n    for (let index = 1; index < curve.points.length; index++) {\n        const point = new Point(curve.points[index].x, curve.points[index].y);\n        context.lineTo(point.x, point.y);\n    }\n\n    if (curve.options?.fillColor) {\n        context.fill();\n    }\n\n    if (curve.options?.borderColor) {\n        context.stroke();\n    }\n\n    context.closePath();\n\n    context.restore();\n}\n\n/**\n * Creates SVG image code of a curve\n * @param curve Curve shape\n * @returns SVG image code of a curve\n */\nfunction svg(curve: Curve): string {\n    let path = `M${curve.points[0].x} ${curve.points[0].y}`;\n\n    for (let index = 1; index < curve.points.length; index++) {\n        path += ` L${curve.points[index].x} ${curve.points[index].y}`;\n    }\n\n    path = `d=\"${path}\"`;\n\n    if (curve.options?.fillColor) {\n        path += ` fill=\"${curve.options.fillColor}\"`;\n    } else {\n        path += \" fill=\\\"none\\\"\";\n    }\n\n    if (curve.options?.borderColor) {\n        path += ` stroke=\"${curve.options.borderColor}\"`;\n    }\n\n    if (curve.options?.thickness) {\n        path += ` stroke-width=\"${curve.options.thickness}\"`;\n    }\n\n    if (curve.options?.dash) {\n        path += ` stroke-dasharray=\"${curve.options.dash.join(\",\")}\"`;\n    }\n\n    return `<path ${path} />`;\n}\n\n/**\n * Curve shape\n */\nexport default class Curve implements IDraw {\n    /**\n     * Creates an instance of a Curve shape\n     * @param points Array of curve coordinate points\n     * @param options Curve drawing options\n     */\n    constructor(\n        public readonly points: Point[],\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[]\n        }\n    ) { }\n\n    /**\n     * Creates SVG image code of a curve\n     */\n    draw(): string;\n    /**\n     * Draws a curve in a context\n     * @param context Image context\n     */\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n}\n","import type { IDraw } from \"../interfaces\";\nimport type Point from \"./Point\";\n\n/**\n * Draws a line in a context\n * @param context Image context\n * @param lineShape Line shape\n */\nfunction drawingContext(context: CanvasRenderingContext2D, lineShape: Line): void {\n    context.save();\n\n    if (lineShape.options?.color) {\n        context.strokeStyle = lineShape.options.color;\n    }\n\n    if (lineShape.options?.thickness) {\n        context.lineWidth = lineShape.options.thickness;\n    }\n\n    if (lineShape.options?.dash) {\n        context.setLineDash(lineShape.options.dash);\n    }\n\n    context.beginPath();\n\n    context.moveTo(lineShape.start.x, lineShape.start.y);\n\n    context.lineTo(lineShape.end.x, lineShape.end.y);\n\n    context.stroke();\n\n    context.closePath();\n\n    context.restore();\n}\n\n/**\n * Creates SVG image code of a line\n * @param lineShape Line shape\n * @returns SVG image code of a line\n */\nfunction svg(lineShape: Line): string {\n    let line = `x1=\"${lineShape.start.x}\" y1=\"${lineShape.start.y}\" x2=\"${lineShape.end.x}\" y2=\"${lineShape.end.y}\"`;\n\n    if (lineShape.options?.color) {\n        line += ` stroke=\"${lineShape.options.color}\"`;\n    }\n\n    if (lineShape.options?.thickness) {\n        line += ` stroke-width=\"${lineShape.options.thickness}\"`;\n    }\n\n    if (lineShape.options?.dash) {\n        line += ` stroke-dasharray=\"${lineShape.options.dash.join(\",\")}\"`;\n    }\n\n    return `<line ${line} />`;\n}\n\n/**\n * Line shape\n */\nexport default class Line implements IDraw {\n    /**\n     * Creates an instance of a Line shape\n     * @param start Start point coordinate\n     * @param end End point coordinate\n     * @param options Line drawing options\n     */\n    constructor(\n        public readonly start: Point,\n        public readonly end: Point,\n        public readonly options?: {\n            readonly color?: string,\n            readonly thickness?: number,\n            readonly dash?: number[]\n        }\n    ) { }\n\n    /**\n     * Creates SVG image code of a line\n     */\n    draw(): string;\n    /**\n     * Draws a line in a context\n     * @param context Image context\n     */\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n}\n","import type { IDraw } from \"../interfaces/IDraw\";\nimport type Point from \"./Point\";\n\n/**\n * Draws a rectangle in a context\n * @param context Image context\n * @param rectangle Rectangle shape\n */\nfunction drawingContext(context: CanvasRenderingContext2D, rectangle: Rectangle): void {\n    context.save();\n\n    if (rectangle.options?.fillColor) {\n        context.fillStyle = rectangle.options.fillColor;\n    }\n\n    if (rectangle.options?.borderColor) {\n        context.strokeStyle = rectangle.options.borderColor;\n    }\n\n    if (rectangle.options?.thickness) {\n        context.lineWidth = rectangle.options.thickness;\n    }\n\n    if (rectangle.options?.dash) {\n        context.setLineDash(rectangle.options.dash);\n    }\n\n    if (rectangle.options?.fillColor) {\n        context.fillRect(rectangle.coordinates.x, rectangle.coordinates.y, rectangle.width, rectangle.height);\n    }\n\n    if (rectangle.options?.borderColor) {\n        context.strokeRect(rectangle.coordinates.x, rectangle.coordinates.y, rectangle.width, rectangle.height);\n    }\n\n    context.restore();\n}\n\n/**\n * Creates SVG image code of a rectangle\n * @param rectangle Rectangle shape\n * @returns SVG image code of a rectangle\n */\nfunction svg(rectangle: Rectangle): string {\n\n    let x = rectangle.coordinates.x;\n    let width = rectangle.width;\n\n    if (width < 0) {\n        x += rectangle.width;\n        width = Math.abs(width);\n    }\n\n    let y = rectangle.coordinates.y;\n    let height = rectangle.height;\n\n    if (height < 0) {\n        y += rectangle.height;\n        height = Math.abs(height);\n    }\n\n    let rect = `x=\"${x}\" y=\"${y}\" width=\"${width}\" height=\"${height}\"`;\n\n    if (rectangle.options?.fillColor) {\n        rect += ` fill=\"${rectangle.options.fillColor}\"`;\n    } else {\n        rect += \" fill=\\\"none\\\"\";\n    }\n\n    if (rectangle.options?.borderColor) {\n        rect += ` stroke=\"${rectangle.options.borderColor}\"`;\n    }\n\n    if (rectangle.options?.thickness) {\n        rect += ` stroke-width=\"${rectangle.options.thickness}\"`;\n    }\n\n    if (rectangle.options?.dash) {\n        rect += ` stroke-dasharray=\"${rectangle.options.dash.join(\",\")}\"`;\n    }\n\n    return `<rect ${rect} />`;\n}\n\n/**\n * Rectangle shape\n */\nexport default class Rectangle implements IDraw {\n    /**\n     * Creates an instance of a Rectangle shape\n     * @param coordinates The coordinate of the upper left corner of Rectangle\n     * @param width Rectangle width\n     * @param height Rectangle height\n     * @param options Rectangle drawing options\n     */\n    constructor(\n        public readonly coordinates: Point,\n        public readonly width: number,\n        public readonly height: number,\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[],\n        }\n    ) { }\n\n    /**\n     * Creates SVG image code of a rectangle\n     */\n    public draw(): string;\n    /**\n     *  Creates SVG image code of a rectangle\n     * @param context Image context\n     */\n    public draw(context: CanvasRenderingContext2D): void;\n    public draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n}\n","import { IFontStyle, IDraw } from \"../interfaces\";\nimport type Point from \"./Point\";\n\n/**\n * Draws a text in a context\n * @param context Image context\n * @param textShape Text shape\n */\nfunction drawingContext(context: CanvasRenderingContext2D, textShape: Text): void {\n    context.save();\n\n    if (textShape.options?.color) {\n        context.fillStyle = textShape.options.color;\n    }\n\n    if (textShape.options?.font) {\n        context.font = Text.fontStyleToString(textShape.options.font);\n    }\n\n    if (textShape.options?.text) {\n        context.textAlign = textShape.options.text.align;\n        context.textBaseline = textShape.options.text.baseline;\n    }\n\n    if (textShape.options?.rotate) {\n        context.translate(\n            textShape.coordinates.x,\n            textShape.coordinates.y\n        );\n        context.rotate(textShape.options.rotate * Math.PI / 180);\n        context.fillText(\n            textShape.text,\n            0,\n            0\n        );\n    } else {\n        context.fillText(\n            textShape.text,\n            textShape.coordinates.x,\n            textShape.coordinates.y\n        );\n    }\n    context.restore();\n}\n\n/**\n * Creates SVG image code of a text\n * @param textShape Text shape\n * @returns SVG image code of a text\n */\nfunction svg(textShape: Text): string {\n    let text;\n\n    if (textShape.options?.rotate) {\n        text = `x=\"0\" y=\"0\" transform=\"translate(${textShape.coordinates.x}, ${textShape.coordinates.y}) rotate(${textShape.options.rotate})\"`;\n    } else {\n        text = `x=\"${textShape.coordinates.x}\" y=\"${textShape.coordinates.y}\"`;\n    }\n\n    if (textShape.options?.color) {\n        text += ` fill=\"${textShape.options.color}\"`;\n    }\n\n    if (textShape.options?.font?.family) {\n        text += ` font-family=\"${textShape.options.font.family}\"`;\n    }\n\n    if (textShape.options?.font?.size) {\n        text += ` font-size=\"${textShape.options.font.size}\"`;\n    }\n\n    if (textShape.options?.font?.style) {\n        text += ` font-style=\"${textShape.options.font.style}\"`;\n    }\n\n    if (textShape.options?.font?.weight) {\n        text += ` font-weight=\"${textShape.options.font.weight}\"`;\n    }\n\n    if (textShape.options?.font?.variant) {\n        text += ` font-variant=\"${textShape.options.font.variant}\"`;\n    }\n\n    if (textShape.options?.font?.stretch) {\n        text += ` font-stretch=\"${textShape.options.font.stretch}\"`;\n    }\n\n    if (textShape.options?.font?.kerning) {\n        text += ` font-kerning=\"${textShape.options.font.kerning}\"`;\n    }\n\n    // text align\n\n    switch (textShape.options?.text?.align) {\n    case \"center\":\n        text += \" text-anchor=\\\"middle\\\"\";\n        break;\n    case \"right\":\n    case \"end\":\n        text += \" text-anchor=\\\"end\\\"\";\n        break;\n    default:\n        text += \" text-anchor=\\\"start\\\"\";\n    }\n\n    // text baseline\n\n    switch (textShape.options?.text?.baseline) {\n    case \"top\":\n    case \"hanging\":\n        text += \" dominant-baseline=\\\"hanging\\\"\";\n        break;\n    case \"alphabetic\":\n        text += \" dominant-baseline=\\\"alphabetic\\\"\";\n        break;\n    case \"ideographic\":\n        text += \" dominant-baseline=\\\"ideographic\\\"\";\n        break;\n    case \"middle\":\n        text += \" dominant-baseline=\\\"middle\\\"\";\n        break;\n    default:\n        text += \" dominant-baseline=\\\"auto\\\"\";\n    }\n\n    return `<text ${text}>${textShape.text}</text>`;\n}\n\n/**\n * Text shape\n */\nexport default class Text implements IDraw {\n    /**\n     * Creates an instance of a Text shape\n     * @param coordinates Text coordinates in a image\n     * @param text Text to draw in an image\n     * @param options Text drawing options\n     */\n    constructor(\n        public readonly coordinates: Point,\n        public readonly text: string,\n        public readonly options?: {\n            readonly color?: string,\n            readonly font?: IFontStyle,\n            readonly text?: {\n                align: CanvasTextAlign,\n                baseline: CanvasTextBaseline,\n            },\n            readonly rotate?: number\n        }\n    ) { }\n\n    /**\n     * Creates SVG image code of a text\n     */\n    draw(): string;\n    /**\n     * Creates SVG image code of a text\n     * @param context Image context\n     */\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n\n    /**\n     * Measures a text\n     * @param context The image context\n     * @param text Text to draw in the image\n     * @param font Font description\n     * @returns A {@link https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics TextMetrics} object \n     */\n    static measure(\n        context: CanvasRenderingContext2D,\n        text: string,\n        font?: IFontStyle\n    ): TextMetrics {\n        if (font) {\n            context.save();\n            context.font = Text.fontStyleToString(font);\n        }\n\n        const result = context.measureText(text);\n\n        if (font) {\n            context.restore();\n        }\n\n        return result;\n    }\n\n    /**\n     * Fits a text into a box \n     * @param context The image context\n     * @param text Text to draw in a box\n     * @param boxSize Size of box in image\n     * @param font Font description\n     * @returns Font size to fit a text into a box\n     */\n    static fitIntoBox(\n        context: CanvasRenderingContext2D,\n        text: string,\n        boxSize: { width: number, height: number },\n        font?: IFontStyle\n    ): number {\n        context.save();\n\n        if (font) {\n            context.font = Text.fontStyleToString(font);\n        }\n\n        const fontString = context.font.split(\" \");\n\n        const index = fontString.findIndex(item => /\\d+px/.test(item.trim()));\n\n        if (index === -1) {\n            throw new Error(\"Font size does not found in an image context\");\n        }\n\n        let number = parseInt(fontString[index]);\n\n        if (!number) {\n            throw new Error(\"Font size does not found in an image context\");\n        }\n\n        const updateFont = () => {\n            fontString[index] = `${number}px`;\n            context.font = fontString.join(\" \");\n        };\n\n        const getTextWidth = (text: string) => context.measureText(text).width;\n\n        const getTextHeight = (text: string) => context.measureText(text).actualBoundingBoxAscent + context.measureText(text).actualBoundingBoxDescent;\n\n        if (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n            // decrease            \n            while (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n                number--;\n                updateFont();\n            }\n        } else {\n            // increase\n            while (getTextWidth(text) < boxSize.width && getTextHeight(text) < boxSize.height) {\n                number++;\n                updateFont();\n            }\n            if (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n                number--;\n            }\n        }\n\n        context.restore();\n\n        return number;\n    }\n\n    /**\n     * Converts font style object to string\n     * @param fontStyle Font style object\n     * @returns Font style string\n     */\n    static fontStyleToString(fontStyle: IFontStyle): string {\n        let font = \"\";\n        if (fontStyle.style) {\n            font = `${fontStyle.style} `;\n        }\n        if (fontStyle.variant) {\n            font += `${fontStyle.variant} `;\n        }\n        if (fontStyle.weight) {\n            font += `${fontStyle.weight} `;\n        }\n        if (fontStyle.stretch) {\n            font += `${fontStyle.stretch} `;\n        }\n        if (fontStyle.size) {\n            font += `${fontStyle.size} `;\n        }\n        if (fontStyle.lineHeight) {\n            font += `${fontStyle.lineHeight} `;\n        }\n        if (fontStyle.family) {\n            font += `${fontStyle.family}`;\n        }\n        return font.trim();\n    }\n}\n","/**\n * Transform Record Object\n */\nexport default class Transform {\n\n    constructor(public readonly object: Record<string, unknown>) { }\n\n    /**\n     * Filters properties\n     * @param properties Array of excluded properties\n     * @returns Filtered object\n     */\n    exclude(properties: string[]): Record<string, unknown> {\n        return Object.keys(this.object)\n            .filter((property) => !properties.includes(property))\n            .reduce((result, property) => {\n                result[property] = this.object[property];\n                return result;\n            }, {} as Record<string, unknown>);\n    }\n\n    /**\n     * Filters properties\n     * @param properties List of allowed properties\n     * @returns Filtered object\n     */\n    include(properties: string[]): Record<string, unknown> {\n        return Object.keys(this.object)\n            .filter((property) => properties.includes(property))\n            .reduce((result, property) => {\n                result[property] = this.object[property];\n                return result;\n            }, {} as Record<string, unknown>);\n    }\n\n    /**\n     * Stringify object\n     * @returns Text\n     */\n    stringify(): string {\n        let result = \"\";\n        for (const property in this.object) {\n            result += `${property}:${this.object[property]}; `;\n        }\n        return result.trim();\n    }\n\n    /**\n     * Stringify object values\n     * @returns Text\n     */\n    values(): string {\n        let result = \"\";\n        for (const property in this.object) {\n            result += `${this.object[property]} `;\n        }\n        return result.trim();\n    }\n\n    /**\n     * Parses text\n     * @param text Source text\n     * @returns Parsed object\n     */\n    static parse(text: string): Record<string, unknown> {\n        const pairs = text.trim().split(\";\").map(item => item.trim());\n        const object: Record<string, unknown> = {};\n        for (const pair of pairs) {\n            const [key, value] = pair.split(\":\").map(item => item.trim());\n            object[key] = value;\n        }\n        return object;\n    }\n}\n","import type { IBuilder, IDraw } from \"./interfaces\";\n\n/**\n * Shape builder\n */\nexport default class Builder implements IBuilder {\n\n    private shapes: IDraw[] = [];\n\n    /**\n     * Creates an instance of a shape builder\n     * @param shapes Shape array\n     */\n    constructor(shapes?: IDraw[]) {\n        if (shapes) {\n            this.shapes = shapes;\n        }\n    }\n\n    /**\n     * Adds a shape\n     * @param shape A shape\n     * @returns The shape builder\n     */\n    addShape(shape: IDraw) {\n        this.shapes.push(shape);\n        return this;\n    }\n\n    /**\n     * Adds a lot of shapes\n     * @param shapes The shapes\n     * @returns The shape builder\n     */\n    addShapes(...shapes: IDraw[]) {\n        this.shapes.push(...shapes);\n        return this;\n    }\n\n    /**\n     * Remove shapes from a shape builder\n     * @param quantity A quantity of shapes. Removes all shapes if the quantity is skipped\n     * @returns The shape builder\n     */\n    removeShapes(quantity?: number) {\n        if (quantity && this.shapes.length > quantity) {\n            this.shapes = this.shapes.slice(0, this.shapes.length - quantity);\n        } else {\n            this.shapes = [];\n        }\n        return this;\n    }\n\n    /**\n     * Creates SVG image code \n     * @param width Image width\n     * @param height Image height\n     */\n    draw(width: number, height: number): string;\n    /**\n     * Draws image in context\n     * @param context Image context\n     */\n    draw(context: CanvasRenderingContext2D): void;\n    draw(widthOrContext: number | CanvasRenderingContext2D, height?: number): string | void {\n\n        if (typeof widthOrContext === \"function\" || typeof widthOrContext === \"object\") {\n            return this.shapes.forEach(shape => shape.draw(widthOrContext));\n        }\n\n        if (typeof widthOrContext === \"number\" && typeof height === \"number\") {\n            return `<svg width=\"${widthOrContext}\" height=\"${height}\">\\n${this.shapes.map(item => item.draw()).join(\"\\n\")}\\n</svg>`;\n        }\n\n        throw new TypeError(\"Wrong arguments.\");\n    }\n}\n"],"names":["drawingContext","svg"],"mappings":";;;;AAGA;;;;AAIG;AACH,SAASA,gBAAc,CAAC,OAAiC,EAAE,WAAmB,EAAA;;IAC1E,OAAO,CAAC,IAAI,EAAE,CAAC;AAEf,IAAA,IAAI,MAAA,WAAW,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAChC,OAAO,CAAC,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC;AACrD,KAAA;AAED,IAAA,IAAI,MAAA,WAAW,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,EAAE;QAClC,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC;AACzD,KAAA;AAED,IAAA,IAAI,MAAA,WAAW,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAChC,OAAO,CAAC,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC;AACrD,KAAA;AAED,IAAA,IAAI,MAAA,WAAW,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;QAC3B,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACjD,KAAA;IAED,OAAO,CAAC,SAAS,EAAE,CAAC;AAEpB,IAAA,OAAO,CAAC,GAAG,CACP,WAAW,CAAC,MAAM,CAAC,CAAC,EACpB,WAAW,CAAC,MAAM,CAAC,CAAC,EACpB,WAAW,CAAC,MAAM,EAClB,CAAC,EACD,CAAC,GAAG,IAAI,CAAC,EAAE,EACX,KAAK,CACR,CAAC;IAEF,OAAO,CAAC,SAAS,EAAE,CAAC;AAEpB,IAAA,IAAI,MAAA,WAAW,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAChC,OAAO,CAAC,IAAI,EAAE,CAAC;AAClB,KAAA;IAED,OAAO,CAAC,MAAM,EAAE,CAAC;IAEjB,OAAO,CAAC,OAAO,EAAE,CAAC;AACtB,CAAC;AAED;;;;AAIG;AACH,SAASC,KAAG,CAAC,WAAmB,EAAA;;AAC5B,IAAA,IAAI,MAAM,GAAG,OAAA,CAAA,MAAA,CAAO,WAAW,CAAC,MAAM,CAAC,CAAC,EAAA,UAAA,CAAA,CAAA,MAAA,CAAS,WAAW,CAAC,MAAM,CAAC,CAAC,EAAA,SAAA,CAAA,CAAA,MAAA,CAAQ,WAAW,CAAC,MAAM,OAAG,CAAC;AAEnG,IAAA,IAAI,MAAA,WAAW,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAChC,MAAM,IAAI,kBAAU,WAAW,CAAC,OAAO,CAAC,SAAS,OAAG,CAAC;AACxD,KAAA;AAAM,SAAA;QACH,MAAM,IAAI,gBAAgB,CAAC;AAC9B,KAAA;AAED,IAAA,IAAI,MAAA,WAAW,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,EAAE;QAClC,MAAM,IAAI,oBAAY,WAAW,CAAC,OAAO,CAAC,WAAW,OAAG,CAAC;AAC5D,KAAA;AAED,IAAA,IAAI,MAAA,WAAW,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAChC,MAAM,IAAI,0BAAkB,WAAW,CAAC,OAAO,CAAC,SAAS,OAAG,CAAC;AAChE,KAAA;AAED,IAAA,IAAI,MAAA,WAAW,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;AAC3B,QAAA,MAAM,IAAI,sBAAA,CAAA,MAAA,CAAsB,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAG,CAAC;AACzE,KAAA;IAED,OAAO,UAAA,CAAA,MAAA,CAAW,MAAM,EAAA,KAAA,CAAK,CAAC;AAClC,CAAC;AAED;;AAEG;AACH,IAAA,MAAA,kBAAA,YAAA;AACI;;;;;AAKG;AACH,IAAA,SAAA,MAAA,CACoB,MAAa,EACb,MAAc,EACd,OAKf,EAAA;QAPe,IAAM,CAAA,MAAA,GAAN,MAAM,CAAO;QACb,IAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;QACd,IAAO,CAAA,OAAA,GAAP,OAAO,CAKtB;KACA;IAUL,MAAI,CAAA,SAAA,CAAA,IAAA,GAAJ,UAAK,OAAkC,EAAA;AACnC,QAAA,OAAO,OAAO,GAAGD,gBAAc,CAAC,OAAO,EAAE,IAAI,CAAC,GAAGC,KAAG,CAAC,IAAI,CAAC,CAAC;KAC9D,CAAA;IACL,OAAC,MAAA,CAAA;AAAD,CAAC,EAAA,CAAA;;AC9GD;;AAEG;AACH,IAAA,KAAA,kBAAA,YAAA;AACI;;;;AAIG;IACH,SAA4B,KAAA,CAAA,CAAS,EAAkB,CAAS,EAAA;QAApC,IAAC,CAAA,CAAA,GAAD,CAAC,CAAQ;QAAkB,IAAC,CAAA,CAAA,GAAD,CAAC,CAAQ;KAAK;AAErE;;;;AAIG;IACH,KAAG,CAAA,SAAA,CAAA,GAAA,GAAH,UAAI,KAAY,EAAA;AACZ,QAAA,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;KACxD,CAAA;AAED;;;;AAIG;IACH,KAAQ,CAAA,SAAA,CAAA,QAAA,GAAR,UAAS,KAAY,EAAA;AACjB,QAAA,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;KACxD,CAAA;IACL,OAAC,KAAA,CAAA;AAAD,CAAC,EAAA,CAAA;;ACzBD;;;;AAIG;AACH,SAASD,gBAAc,CAAC,OAAiC,EAAE,KAAY,EAAA;;IACnE,OAAO,CAAC,IAAI,EAAE,CAAC;AAEf,IAAA,IAAI,MAAA,KAAK,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAC1B,OAAO,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC;AAC/C,KAAA;AAED,IAAA,IAAI,MAAA,KAAK,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,EAAE;QAC5B,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC;AACnD,KAAA;AAED,IAAA,IAAI,MAAA,KAAK,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAC1B,OAAO,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC;AAC/C,KAAA;AACD,IAAA,IAAI,MAAA,KAAK,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;QACrB,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC3C,KAAA;IAED,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE9D,OAAO,CAAC,SAAS,EAAE,CAAC;IAEpB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;AAEjC,IAAA,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QACtD,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;AACpC,KAAA;AAED,IAAA,IAAI,MAAA,KAAK,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAC1B,OAAO,CAAC,IAAI,EAAE,CAAC;AAClB,KAAA;AAED,IAAA,IAAI,MAAA,KAAK,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,EAAE;QAC5B,OAAO,CAAC,MAAM,EAAE,CAAC;AACpB,KAAA;IAED,OAAO,CAAC,SAAS,EAAE,CAAC;IAEpB,OAAO,CAAC,OAAO,EAAE,CAAC;AACtB,CAAC;AAED;;;;AAIG;AACH,SAASC,KAAG,CAAC,KAAY,EAAA;;IACrB,IAAI,IAAI,GAAG,GAAI,CAAA,MAAA,CAAA,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,CAAC;AAExD,IAAA,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QACtD,IAAI,IAAI,YAAK,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,cAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,CAAC;AACjE,KAAA;AAED,IAAA,IAAI,GAAG,MAAA,CAAA,MAAA,CAAM,IAAI,EAAA,IAAA,CAAG,CAAC;AAErB,IAAA,IAAI,MAAA,KAAK,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAC1B,IAAI,IAAI,kBAAU,KAAK,CAAC,OAAO,CAAC,SAAS,OAAG,CAAC;AAChD,KAAA;AAAM,SAAA;QACH,IAAI,IAAI,gBAAgB,CAAC;AAC5B,KAAA;AAED,IAAA,IAAI,MAAA,KAAK,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,EAAE;QAC5B,IAAI,IAAI,oBAAY,KAAK,CAAC,OAAO,CAAC,WAAW,OAAG,CAAC;AACpD,KAAA;AAED,IAAA,IAAI,MAAA,KAAK,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAC1B,IAAI,IAAI,0BAAkB,KAAK,CAAC,OAAO,CAAC,SAAS,OAAG,CAAC;AACxD,KAAA;AAED,IAAA,IAAI,MAAA,KAAK,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;AACrB,QAAA,IAAI,IAAI,sBAAA,CAAA,MAAA,CAAsB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAG,CAAC;AACjE,KAAA;IAED,OAAO,QAAA,CAAA,MAAA,CAAS,IAAI,EAAA,KAAA,CAAK,CAAC;AAC9B,CAAC;AAED;;AAEG;AACH,IAAA,KAAA,kBAAA,YAAA;AACI;;;;AAIG;IACH,SACoB,KAAA,CAAA,MAAe,EACf,OAKf,EAAA;QANe,IAAM,CAAA,MAAA,GAAN,MAAM,CAAS;QACf,IAAO,CAAA,OAAA,GAAP,OAAO,CAKtB;KACA;IAWL,KAAI,CAAA,SAAA,CAAA,IAAA,GAAJ,UAAK,OAAkC,EAAA;AACnC,QAAA,OAAO,OAAO,GAAGD,gBAAc,CAAC,OAAO,EAAE,IAAI,CAAC,GAAGC,KAAG,CAAC,IAAI,CAAC,CAAC;KAC9D,CAAA;IACL,OAAC,KAAA,CAAA;AAAD,CAAC,EAAA,CAAA;;ACjHD;;;;AAIG;AACH,SAASD,gBAAc,CAAC,OAAiC,EAAE,SAAe,EAAA;;IACtE,OAAO,CAAC,IAAI,EAAE,CAAC;AAEf,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,EAAE;QAC1B,OAAO,CAAC,WAAW,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC;AACjD,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAC9B,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC;AACnD,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;QACzB,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC/C,KAAA;IAED,OAAO,CAAC,SAAS,EAAE,CAAC;AAEpB,IAAA,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAErD,IAAA,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEjD,OAAO,CAAC,MAAM,EAAE,CAAC;IAEjB,OAAO,CAAC,SAAS,EAAE,CAAC;IAEpB,OAAO,CAAC,OAAO,EAAE,CAAC;AACtB,CAAC;AAED;;;;AAIG;AACH,SAASC,KAAG,CAAC,SAAe,EAAA;;IACxB,IAAI,IAAI,GAAG,OAAA,CAAA,MAAA,CAAO,SAAS,CAAC,KAAK,CAAC,CAAC,EAAA,UAAA,CAAA,CAAA,MAAA,CAAS,SAAS,CAAC,KAAK,CAAC,CAAC,EAAA,UAAA,CAAA,CAAA,MAAA,CAAS,SAAS,CAAC,GAAG,CAAC,CAAC,EAAA,UAAA,CAAA,CAAA,MAAA,CAAS,SAAS,CAAC,GAAG,CAAC,CAAC,EAAA,IAAA,CAAG,CAAC;AAEjH,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,EAAE;QAC1B,IAAI,IAAI,oBAAY,SAAS,CAAC,OAAO,CAAC,KAAK,OAAG,CAAC;AAClD,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAC9B,IAAI,IAAI,0BAAkB,SAAS,CAAC,OAAO,CAAC,SAAS,OAAG,CAAC;AAC5D,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;AACzB,QAAA,IAAI,IAAI,sBAAA,CAAA,MAAA,CAAsB,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAG,CAAC;AACrE,KAAA;IAED,OAAO,QAAA,CAAA,MAAA,CAAS,IAAI,EAAA,KAAA,CAAK,CAAC;AAC9B,CAAC;AAED;;AAEG;AACH,IAAA,IAAA,kBAAA,YAAA;AACI;;;;;AAKG;AACH,IAAA,SAAA,IAAA,CACoB,KAAY,EACZ,GAAU,EACV,OAIf,EAAA;QANe,IAAK,CAAA,KAAA,GAAL,KAAK,CAAO;QACZ,IAAG,CAAA,GAAA,GAAH,GAAG,CAAO;QACV,IAAO,CAAA,OAAA,GAAP,OAAO,CAItB;KACA;IAWL,IAAI,CAAA,SAAA,CAAA,IAAA,GAAJ,UAAK,OAAkC,EAAA;AACnC,QAAA,OAAO,OAAO,GAAGD,gBAAc,CAAC,OAAO,EAAE,IAAI,CAAC,GAAGC,KAAG,CAAC,IAAI,CAAC,CAAC;KAC9D,CAAA;IACL,OAAC,IAAA,CAAA;AAAD,CAAC,EAAA,CAAA;;ACxFD;;;;AAIG;AACH,SAASD,gBAAc,CAAC,OAAiC,EAAE,SAAoB,EAAA;;IAC3E,OAAO,CAAC,IAAI,EAAE,CAAC;AAEf,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAC9B,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC;AACnD,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,EAAE;QAChC,OAAO,CAAC,WAAW,GAAG,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC;AACvD,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAC9B,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC;AACnD,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;QACzB,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC/C,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAC9B,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;AACzG,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,EAAE;QAChC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;AAC3G,KAAA;IAED,OAAO,CAAC,OAAO,EAAE,CAAC;AACtB,CAAC;AAED;;;;AAIG;AACH,SAASC,KAAG,CAAC,SAAoB,EAAA;;AAE7B,IAAA,IAAI,CAAC,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;AAChC,IAAA,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;IAE5B,IAAI,KAAK,GAAG,CAAC,EAAE;AACX,QAAA,CAAC,IAAI,SAAS,CAAC,KAAK,CAAC;AACrB,QAAA,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC3B,KAAA;AAED,IAAA,IAAI,CAAC,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;AAChC,IAAA,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IAE9B,IAAI,MAAM,GAAG,CAAC,EAAE;AACZ,QAAA,CAAC,IAAI,SAAS,CAAC,MAAM,CAAC;AACtB,QAAA,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AAC7B,KAAA;IAED,IAAI,IAAI,GAAG,MAAA,CAAA,MAAA,CAAM,CAAC,EAAA,SAAA,CAAA,CAAA,MAAA,CAAQ,CAAC,EAAA,aAAA,CAAA,CAAA,MAAA,CAAY,KAAK,EAAA,cAAA,CAAA,CAAA,MAAA,CAAa,MAAM,EAAA,IAAA,CAAG,CAAC;AAEnE,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAC9B,IAAI,IAAI,kBAAU,SAAS,CAAC,OAAO,CAAC,SAAS,OAAG,CAAC;AACpD,KAAA;AAAM,SAAA;QACH,IAAI,IAAI,gBAAgB,CAAC;AAC5B,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,EAAE;QAChC,IAAI,IAAI,oBAAY,SAAS,CAAC,OAAO,CAAC,WAAW,OAAG,CAAC;AACxD,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;QAC9B,IAAI,IAAI,0BAAkB,SAAS,CAAC,OAAO,CAAC,SAAS,OAAG,CAAC;AAC5D,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;AACzB,QAAA,IAAI,IAAI,sBAAA,CAAA,MAAA,CAAsB,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAG,CAAC;AACrE,KAAA;IAED,OAAO,QAAA,CAAA,MAAA,CAAS,IAAI,EAAA,KAAA,CAAK,CAAC;AAC9B,CAAC;AAED;;AAEG;AACH,IAAA,SAAA,kBAAA,YAAA;AACI;;;;;;AAMG;AACH,IAAA,SAAA,SAAA,CACoB,WAAkB,EAClB,KAAa,EACb,MAAc,EACd,OAKf,EAAA;QARe,IAAW,CAAA,WAAA,GAAX,WAAW,CAAO;QAClB,IAAK,CAAA,KAAA,GAAL,KAAK,CAAQ;QACb,IAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;QACd,IAAO,CAAA,OAAA,GAAP,OAAO,CAKtB;KACA;IAWE,SAAI,CAAA,SAAA,CAAA,IAAA,GAAX,UAAY,OAAkC,EAAA;AAC1C,QAAA,OAAO,OAAO,GAAGD,gBAAc,CAAC,OAAO,EAAE,IAAI,CAAC,GAAGC,KAAG,CAAC,IAAI,CAAC,CAAC;KAC9D,CAAA;IACL,OAAC,SAAA,CAAA;AAAD,CAAC,EAAA,CAAA;;ACpHD;;;;AAIG;AACH,SAAS,cAAc,CAAC,OAAiC,EAAE,SAAe,EAAA;;IACtE,OAAO,CAAC,IAAI,EAAE,CAAC;AAEf,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,EAAE;QAC1B,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC;AAC/C,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;AACzB,QAAA,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACjE,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;QACzB,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;QACjD,OAAO,CAAC,YAAY,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;AAC1D,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,EAAE;AAC3B,QAAA,OAAO,CAAC,SAAS,CACb,SAAS,CAAC,WAAW,CAAC,CAAC,EACvB,SAAS,CAAC,WAAW,CAAC,CAAC,CAC1B,CAAC;AACF,QAAA,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;QACzD,OAAO,CAAC,QAAQ,CACZ,SAAS,CAAC,IAAI,EACd,CAAC,EACD,CAAC,CACJ,CAAC;AACL,KAAA;AAAM,SAAA;AACH,QAAA,OAAO,CAAC,QAAQ,CACZ,SAAS,CAAC,IAAI,EACd,SAAS,CAAC,WAAW,CAAC,CAAC,EACvB,SAAS,CAAC,WAAW,CAAC,CAAC,CAC1B,CAAC;AACL,KAAA;IACD,OAAO,CAAC,OAAO,EAAE,CAAC;AACtB,CAAC;AAED;;;;AAIG;AACH,SAAS,GAAG,CAAC,SAAe,EAAA;;AACxB,IAAA,IAAI,IAAI,CAAC;AAET,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,EAAE;QAC3B,IAAI,GAAG,gDAAoC,SAAS,CAAC,WAAW,CAAC,CAAC,eAAK,SAAS,CAAC,WAAW,CAAC,CAAC,sBAAY,SAAS,CAAC,OAAO,CAAC,MAAM,QAAI,CAAC;AAC1I,KAAA;AAAM,SAAA;AACH,QAAA,IAAI,GAAG,MAAA,CAAA,MAAA,CAAM,SAAS,CAAC,WAAW,CAAC,CAAC,EAAQ,SAAA,CAAA,CAAA,MAAA,CAAA,SAAS,CAAC,WAAW,CAAC,CAAC,OAAG,CAAC;AAC1E,KAAA;AAED,IAAA,IAAI,MAAA,SAAS,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,EAAE;QAC1B,IAAI,IAAI,kBAAU,SAAS,CAAC,OAAO,CAAC,KAAK,OAAG,CAAC;AAChD,KAAA;IAED,IAAI,CAAA,EAAA,GAAA,MAAA,SAAS,CAAC,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,EAAE;QACjC,IAAI,IAAI,iBAAiB,CAAA,MAAA,CAAA,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAA,IAAA,CAAG,CAAC;AAC7D,KAAA;IAED,IAAI,CAAA,EAAA,GAAA,MAAA,SAAS,CAAC,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,EAAE;QAC/B,IAAI,IAAI,eAAe,CAAA,MAAA,CAAA,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAA,IAAA,CAAG,CAAC;AACzD,KAAA;IAED,IAAI,CAAA,EAAA,GAAA,MAAA,SAAS,CAAC,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,EAAE;QAChC,IAAI,IAAI,gBAAgB,CAAA,MAAA,CAAA,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAA,IAAA,CAAG,CAAC;AAC3D,KAAA;IAED,IAAI,CAAA,EAAA,GAAA,MAAA,SAAS,CAAC,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,EAAE;QACjC,IAAI,IAAI,iBAAiB,CAAA,MAAA,CAAA,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAA,IAAA,CAAG,CAAC;AAC7D,KAAA;IAED,IAAI,CAAA,EAAA,GAAA,MAAA,SAAS,CAAC,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,EAAE;QAClC,IAAI,IAAI,kBAAkB,CAAA,MAAA,CAAA,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAA,IAAA,CAAG,CAAC;AAC/D,KAAA;IAED,IAAI,CAAA,EAAA,GAAA,MAAA,SAAS,CAAC,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,EAAE;QAClC,IAAI,IAAI,kBAAkB,CAAA,MAAA,CAAA,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAA,IAAA,CAAG,CAAC;AAC/D,KAAA;IAED,IAAI,CAAA,EAAA,GAAA,MAAA,SAAS,CAAC,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,EAAE;QAClC,IAAI,IAAI,kBAAkB,CAAA,MAAA,CAAA,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAA,IAAA,CAAG,CAAC;AAC/D,KAAA;;IAID,QAAQ,CAAA,EAAA,GAAA,MAAA,SAAS,CAAC,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK;AACtC,QAAA,KAAK,QAAQ;YACT,IAAI,IAAI,yBAAyB,CAAC;YAClC,MAAM;AACV,QAAA,KAAK,OAAO,CAAC;AACb,QAAA,KAAK,KAAK;YACN,IAAI,IAAI,sBAAsB,CAAC;YAC/B,MAAM;AACV,QAAA;YACI,IAAI,IAAI,wBAAwB,CAAC;AACpC,KAAA;;IAID,QAAQ,CAAA,EAAA,GAAA,MAAA,SAAS,CAAC,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ;AACzC,QAAA,KAAK,KAAK,CAAC;AACX,QAAA,KAAK,SAAS;YACV,IAAI,IAAI,gCAAgC,CAAC;YACzC,MAAM;AACV,QAAA,KAAK,YAAY;YACb,IAAI,IAAI,mCAAmC,CAAC;YAC5C,MAAM;AACV,QAAA,KAAK,aAAa;YACd,IAAI,IAAI,oCAAoC,CAAC;YAC7C,MAAM;AACV,QAAA,KAAK,QAAQ;YACT,IAAI,IAAI,+BAA+B,CAAC;YACxC,MAAM;AACV,QAAA;YACI,IAAI,IAAI,6BAA6B,CAAC;AACzC,KAAA;AAED,IAAA,OAAO,gBAAS,IAAI,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,SAAS,CAAC,IAAI,YAAS,CAAC;AACpD,CAAC;AAED;;AAEG;AACH,IAAA,IAAA,kBAAA,YAAA;AACI;;;;;AAKG;AACH,IAAA,SAAA,IAAA,CACoB,WAAkB,EAClB,IAAY,EACZ,OAQf,EAAA;QAVe,IAAW,CAAA,WAAA,GAAX,WAAW,CAAO;QAClB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;QACZ,IAAO,CAAA,OAAA,GAAP,OAAO,CAQtB;KACA;IAWL,IAAI,CAAA,SAAA,CAAA,IAAA,GAAJ,UAAK,OAAkC,EAAA;AACnC,QAAA,OAAO,OAAO,GAAG,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;KAC9D,CAAA;AAED;;;;;;AAMG;AACI,IAAA,IAAA,CAAA,OAAO,GAAd,UACI,OAAiC,EACjC,IAAY,EACZ,IAAiB,EAAA;AAEjB,QAAA,IAAI,IAAI,EAAE;YACN,OAAO,CAAC,IAAI,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AAC/C,SAAA;QAED,IAAM,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAEzC,QAAA,IAAI,IAAI,EAAE;YACN,OAAO,CAAC,OAAO,EAAE,CAAC;AACrB,SAAA;AAED,QAAA,OAAO,MAAM,CAAC;KACjB,CAAA;AAED;;;;;;;AAOG;IACI,IAAU,CAAA,UAAA,GAAjB,UACI,OAAiC,EACjC,IAAY,EACZ,OAA0C,EAC1C,IAAiB,EAAA;QAEjB,OAAO,CAAC,IAAI,EAAE,CAAC;AAEf,QAAA,IAAI,IAAI,EAAE;YACN,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AAC/C,SAAA;QAED,IAAM,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE3C,IAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,UAAA,IAAI,EAAA,EAAI,OAAA,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA,EAAA,CAAC,CAAC;AAEtE,QAAA,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;AACd,YAAA,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;AACnE,SAAA;QAED,IAAI,MAAM,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAEzC,IAAI,CAAC,MAAM,EAAE;AACT,YAAA,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;AACnE,SAAA;AAED,QAAA,IAAM,UAAU,GAAG,YAAA;AACf,YAAA,UAAU,CAAC,KAAK,CAAC,GAAG,EAAG,CAAA,MAAA,CAAA,MAAM,OAAI,CAAC;YAClC,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACxC,SAAC,CAAC;AAEF,QAAA,IAAM,YAAY,GAAG,UAAC,IAAY,EAAA,EAAK,OAAA,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAA,EAAA,CAAC;QAEvE,IAAM,aAAa,GAAG,UAAC,IAAY,EAAA,EAAK,OAAA,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,uBAAuB,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,wBAAwB,CAAtG,EAAsG,CAAC;AAE/I,QAAA,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE;;AAE5E,YAAA,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE;AAC/E,gBAAA,MAAM,EAAE,CAAC;AACT,gBAAA,UAAU,EAAE,CAAC;AAChB,aAAA;AACJ,SAAA;AAAM,aAAA;;AAEH,YAAA,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE;AAC/E,gBAAA,MAAM,EAAE,CAAC;AACT,gBAAA,UAAU,EAAE,CAAC;AAChB,aAAA;AACD,YAAA,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE;AAC5E,gBAAA,MAAM,EAAE,CAAC;AACZ,aAAA;AACJ,SAAA;QAED,OAAO,CAAC,OAAO,EAAE,CAAC;AAElB,QAAA,OAAO,MAAM,CAAC;KACjB,CAAA;AAED;;;;AAIG;IACI,IAAiB,CAAA,iBAAA,GAAxB,UAAyB,SAAqB,EAAA;QAC1C,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,SAAS,CAAC,KAAK,EAAE;AACjB,YAAA,IAAI,GAAG,EAAG,CAAA,MAAA,CAAA,SAAS,CAAC,KAAK,MAAG,CAAC;AAChC,SAAA;QACD,IAAI,SAAS,CAAC,OAAO,EAAE;AACnB,YAAA,IAAI,IAAI,EAAG,CAAA,MAAA,CAAA,SAAS,CAAC,OAAO,MAAG,CAAC;AACnC,SAAA;QACD,IAAI,SAAS,CAAC,MAAM,EAAE;AAClB,YAAA,IAAI,IAAI,EAAG,CAAA,MAAA,CAAA,SAAS,CAAC,MAAM,MAAG,CAAC;AAClC,SAAA;QACD,IAAI,SAAS,CAAC,OAAO,EAAE;AACnB,YAAA,IAAI,IAAI,EAAG,CAAA,MAAA,CAAA,SAAS,CAAC,OAAO,MAAG,CAAC;AACnC,SAAA;QACD,IAAI,SAAS,CAAC,IAAI,EAAE;AAChB,YAAA,IAAI,IAAI,EAAG,CAAA,MAAA,CAAA,SAAS,CAAC,IAAI,MAAG,CAAC;AAChC,SAAA;QACD,IAAI,SAAS,CAAC,UAAU,EAAE;AACtB,YAAA,IAAI,IAAI,EAAG,CAAA,MAAA,CAAA,SAAS,CAAC,UAAU,MAAG,CAAC;AACtC,SAAA;QACD,IAAI,SAAS,CAAC,MAAM,EAAE;AAClB,YAAA,IAAI,IAAI,EAAG,CAAA,MAAA,CAAA,SAAS,CAAC,MAAM,CAAE,CAAC;AACjC,SAAA;AACD,QAAA,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;KACtB,CAAA;IACL,OAAC,IAAA,CAAA;AAAD,CAAC,EAAA,CAAA;;;;;;;;;;;;;;;;AC9RD;;AAEG;AACH,IAAA,SAAA,kBAAA,YAAA;AAEI,IAAA,SAAA,SAAA,CAA4B,MAA+B,EAAA;QAA/B,IAAM,CAAA,MAAA,GAAN,MAAM,CAAyB;KAAK;AAEhE;;;;AAIG;IACH,SAAO,CAAA,SAAA,CAAA,OAAA,GAAP,UAAQ,UAAoB,EAAA;QAA5B,IAOC,KAAA,GAAA,IAAA,CAAA;AANG,QAAA,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AAC1B,aAAA,MAAM,CAAC,UAAC,QAAQ,EAAA,EAAK,OAAA,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA,EAAA,CAAC;AACpD,aAAA,MAAM,CAAC,UAAC,MAAM,EAAE,QAAQ,EAAA;YACrB,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACzC,YAAA,OAAO,MAAM,CAAC;SACjB,EAAE,EAA6B,CAAC,CAAC;KACzC,CAAA;AAED;;;;AAIG;IACH,SAAO,CAAA,SAAA,CAAA,OAAA,GAAP,UAAQ,UAAoB,EAAA;QAA5B,IAOC,KAAA,GAAA,IAAA,CAAA;AANG,QAAA,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AAC1B,aAAA,MAAM,CAAC,UAAC,QAAQ,EAAA,EAAK,OAAA,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA,EAAA,CAAC;AACnD,aAAA,MAAM,CAAC,UAAC,MAAM,EAAE,QAAQ,EAAA;YACrB,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACzC,YAAA,OAAO,MAAM,CAAC;SACjB,EAAE,EAA6B,CAAC,CAAC;KACzC,CAAA;AAED;;;AAGG;AACH,IAAA,SAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;QACI,IAAI,MAAM,GAAG,EAAE,CAAC;AAChB,QAAA,KAAK,IAAM,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE;YAChC,MAAM,IAAI,EAAG,CAAA,MAAA,CAAA,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAA,IAAA,CAAI,CAAC;AACtD,SAAA;AACD,QAAA,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;KACxB,CAAA;AAED;;;AAGG;AACH,IAAA,SAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;QACI,IAAI,MAAM,GAAG,EAAE,CAAC;AAChB,QAAA,KAAK,IAAM,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE;YAChC,MAAM,IAAI,UAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAA,GAAA,CAAG,CAAC;AACzC,SAAA;AACD,QAAA,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;KACxB,CAAA;AAED;;;;AAIG;IACI,SAAK,CAAA,KAAA,GAAZ,UAAa,IAAY,EAAA;QACrB,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,EAAA,EAAI,OAAA,IAAI,CAAC,IAAI,EAAE,CAAA,EAAA,CAAC,CAAC;QAC9D,IAAM,MAAM,GAA4B,EAAE,CAAC;AAC3C,QAAA,KAAmB,UAAK,EAAL,OAAA,GAAA,KAAK,EAAL,EAAK,GAAA,OAAA,CAAA,MAAA,EAAL,IAAK,EAAE;AAArB,YAAA,IAAM,IAAI,GAAA,OAAA,CAAA,EAAA,CAAA,CAAA;YACL,IAAA,EAAA,GAAe,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,EAAA,EAAI,OAAA,IAAI,CAAC,IAAI,EAAE,CAAA,EAAA,CAAC,EAAtD,GAAG,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,KAAK,GAAA,EAAA,CAAA,CAAA,CAA4C,CAAC;AAC9D,YAAA,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AACvB,SAAA;AACD,QAAA,OAAO,MAAM,CAAC;KACjB,CAAA;IACL,OAAC,SAAA,CAAA;AAAD,CAAC,EAAA;;ACvED;;AAEG;AACH,IAAA,OAAA,kBAAA,YAAA;AAII;;;AAGG;AACH,IAAA,SAAA,OAAA,CAAY,MAAgB,EAAA;QANpB,IAAM,CAAA,MAAA,GAAY,EAAE,CAAC;AAOzB,QAAA,IAAI,MAAM,EAAE;AACR,YAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACxB,SAAA;KACJ;AAED;;;;AAIG;IACH,OAAQ,CAAA,SAAA,CAAA,QAAA,GAAR,UAAS,KAAY,EAAA;AACjB,QAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACxB,QAAA,OAAO,IAAI,CAAC;KACf,CAAA;AAED;;;;AAIG;AACH,IAAA,OAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;;QAAU,IAAkB,MAAA,GAAA,EAAA,CAAA;aAAlB,IAAkB,EAAA,GAAA,CAAA,EAAlB,EAAkB,GAAA,SAAA,CAAA,MAAA,EAAlB,EAAkB,EAAA,EAAA;YAAlB,MAAkB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;QACxB,CAAA,EAAA,GAAA,IAAI,CAAC,MAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,MAAM,CAAE,CAAA;AAC5B,QAAA,OAAO,IAAI,CAAC;KACf,CAAA;AAED;;;;AAIG;IACH,OAAY,CAAA,SAAA,CAAA,YAAA,GAAZ,UAAa,QAAiB,EAAA;QAC1B,IAAI,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,QAAQ,EAAE;AAC3C,YAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC;AACrE,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACpB,SAAA;AACD,QAAA,OAAO,IAAI,CAAC;KACf,CAAA;AAaD,IAAA,OAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,UAAK,cAAiD,EAAE,MAAe,EAAA;QAEnE,IAAI,OAAO,cAAc,KAAK,UAAU,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;AAC5E,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK,EAAA,EAAI,OAAA,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAA1B,EAA0B,CAAC,CAAC;AACnE,SAAA;QAED,IAAI,OAAO,cAAc,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;AAClE,YAAA,OAAO,eAAe,CAAA,MAAA,CAAA,cAAc,EAAa,cAAA,CAAA,CAAA,MAAA,CAAA,MAAM,EAAO,OAAA,CAAA,CAAA,MAAA,CAAA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,IAAI,EAAA,EAAI,OAAA,IAAI,CAAC,IAAI,EAAE,CAAA,EAAA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAA,UAAA,CAAU,CAAC;AAC3H,SAAA;AAED,QAAA,MAAM,IAAI,SAAS,CAAC,kBAAkB,CAAC,CAAC;KAC3C,CAAA;IACL,OAAC,OAAA,CAAA;AAAD,CAAC,EAAA;;;;;;;"}