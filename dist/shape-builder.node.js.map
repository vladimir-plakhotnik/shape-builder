{"version":3,"file":"shape-builder.node.js","sources":["../src/models/Point.ts","../src/models/Line.ts","../src/models/Curve.ts","../src/models/Rectangle.ts","../src/models/Circle.ts","../src/models/Text.ts","../src/models/Builder.ts"],"sourcesContent":["export default class Point {\n    constructor(readonly x: number, readonly y: number) {}\n}\n","import Point from \"./Point\";\nimport { IDraw } from \"./IDraw\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, line: Line): void {\n    context.save();\n\n    if (line.options?.color) {\n        context.strokeStyle = line.options.color;\n    }\n\n    if (line.options?.thickness) {\n        context.lineWidth = line.options.thickness;\n    }\n    \n    if (line.options?.dash) {\n        context.setLineDash(line.options.dash);\n    }\n    \n    context.beginPath();\n\n    context.moveTo(line.start.x, line.start.y);\n\n    context.lineTo(line.end.x, line.end.y);\n\n    context.stroke();\n\n    context.closePath();\n\n    context.restore();\n}\n\nfunction svg(lineObject: Line): string {\n    let line = `x1=\"${lineObject.start.x}\" y1=\"${lineObject.start.y}\" x2=\"${lineObject.end.x}\" y2=\"${lineObject.end.y}\"`;       \n\n    if (lineObject.options?.color) {\n        line += ` stroke=\"${lineObject.options.color}\"`;\n    }\n\n    if (lineObject.options?.thickness) {\n        line += ` stroke-width=\"${lineObject.options.thickness}\"`;\n    }\n\n    if (lineObject.options?.dash) {\n        line += ` stroke-dasharray=\"${lineObject.options.dash.join(\",\")}\"`;\n    }\n\n    return `<line ${line} />`;\n}\n\nexport default class Line implements IDraw {\n    constructor(\n        public readonly start: Point, \n        public readonly end: Point,\n        public readonly options?: {\n            readonly color?: string,\n            readonly thickness?: number,\n            readonly dash?: number[]\n        }\n    ) {}\n\n    draw(): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this): svg(this);\n    }\n}\n","import { IDraw } from \"./IDraw\";\nimport Point from \"./Point\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, curve: Curve): void {\n    context.save();\n\n    if (curve.options?.fillColor) {\n        context.fillStyle = curve.options.fillColor;\n    }\n\n    if (curve.options?.borderColor) {\n        context.strokeStyle = curve.options.borderColor;\n    }\n\n    if (curve.options?.thickness) {\n        context.lineWidth = curve.options.thickness;\n    }\n    if (curve.options?.dash) {\n        context.setLineDash(curve.options.dash);\n    }\n    \n    const start = new Point(curve.points[0].x, curve.points[0].y);\n\n\n    context.beginPath();\n\n    \n    context.moveTo(start.x, start.y);    \n\n    for (let index = 1; index < curve.points.length; index++) { \n        const point = new Point (curve.points[index].x, curve.points[index].y);\n        context.lineTo(point.x, point.y);\n    }    \n\n    if (curve.options?.fillColor) {              \n        context.fill();\n    }\n\n    if (curve.options?.borderColor) {\n        context.stroke();\n    }\n    \n    context.closePath(); \n\n    context.restore();\n}\n\nfunction svg(curve: Curve): string {\n    let path = `M${curve.points[0].x} ${curve.points[0].y}`;\n\n    for (let index = 1; index < curve.points.length; index++) {\n        path += ` L${curve.points[index].x} ${curve.points[index].y}`;\n    }\n\n    path = `d=\"${path}\"`;\n\n    if (curve.options?.fillColor) {\n        path += ` fill=\"${curve.options.fillColor}\"`;\n    } else {\n        path += \" fill=\\\"none\\\"\";\n    }\n\n    if (curve.options?.borderColor) {\n        path += ` stroke=\"${curve.options.borderColor}\"`;\n    }\n\n    if (curve.options?.thickness) {\n        path += ` stroke-width=\"${curve.options.thickness}\"`;\n    }\n\n    if (curve.options?.dash) {\n        path += ` stroke-dasharray=\"${curve.options.dash.join(\",\")}\"`;\n    }\n\n    return `<path ${path} />`;\n}\n\nexport default class Curve implements IDraw {\n    constructor(\n        public readonly points: Point[],\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[]\n        }\n    ) {}\n\n    draw(): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this): svg(this);\n    }\n}\n","import Point from \"./Point\";\nimport { IDraw } from \"./IDraw\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, rectangle: Rectangle): void {\n    context.save();\n\n    if (rectangle.options?.fillColor) {\n        context.fillStyle = rectangle.options.fillColor;\n    }\n\n    if (rectangle.options?.borderColor) {\n        context.strokeStyle = rectangle.options.borderColor;\n    }\n\n    if (rectangle.options?.thickness) {\n        context.lineWidth = rectangle.options.thickness;\n    }\n    \n    if (rectangle.options?.dash) {\n        context.setLineDash(rectangle.options.dash);\n    }\n\n    if (rectangle.options?.fillColor) {\n        context.fillRect(rectangle.coordinates.x, rectangle.coordinates.y, rectangle.width, rectangle.height);\n    }\n    \n    if (rectangle.options?.borderColor) {\n        context.strokeRect(rectangle.coordinates.x, rectangle.coordinates.y, rectangle.width, rectangle.height);\n    }    \n\n    context.restore();\n}\n\nfunction svg(rectangle: Rectangle): string {\n\n    let x = rectangle.coordinates.x;\n    let width = rectangle.width;\n\n    if (width < 0) {\n        x += rectangle.width;\n        width = Math.abs(width);\n    }\n\n    let y = rectangle.coordinates.y;\n    let height = rectangle.height;\n\n    if (height < 0) {\n        y += rectangle.height;\n        height = Math.abs(height);\n    }\n\n    let rect = `x=\"${x}\" y=\"${y}\" width=\"${width}\" height=\"${height}\"`;\n\n    if (rectangle.options?.fillColor) {\n        rect += ` fill=\"${rectangle.options.fillColor}\"`;\n    } else {\n        rect += \" fill=\\\"none\\\"\";\n    }\n\n    if (rectangle.options?.borderColor) {\n        rect += ` stroke=\"${rectangle.options.borderColor}\"`;\n    }\n\n    if (rectangle.options?.thickness) {\n        rect += ` stroke-width=\"${rectangle.options.thickness}\"`;\n    }\n\n    if (rectangle.options?.dash) {\n        rect += ` stroke-dasharray=\"${rectangle.options.dash.join(\",\")}\"`;\n    }\n\n    return `<rect ${rect} />`;\n}\n\nexport default class Rectangle implements IDraw {\n    constructor(\n        public readonly coordinates: Point,\n        public readonly width: number, \n        public readonly height: number,\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[],\n        }\n    ) {}\n\n    public draw(): string;\n    public draw(context: CanvasRenderingContext2D): void;\n    public draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this): svg(this);\n    }\n}","import { IDraw } from \"./IDraw\";\nimport Point from \"./Point\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, circle: Circle): void {\n    context.save();\n\n    if (circle.options?.fillColor) {\n        context.fillStyle = circle.options.fillColor;\n    }\n    \n    if (circle.options?.borderColor) {\n        context.strokeStyle = circle.options.borderColor;\n    }\n\n    if (circle.options?.thickness) {\n        context.lineWidth = circle.options.thickness;\n    }\n        \n    if (circle.options?.dash) {\n        context.setLineDash(circle.options.dash);\n    }\n\n    context.beginPath();\n\n    context.arc(\n        circle.center.x, \n        circle.center.y,\n        circle.radius,\n        0,\n        2 * Math.PI,\n        false\n    );\n\n    context.closePath();\n\n    if (circle.options?.fillColor) {\n        context.fill();\n    }\n\n    context.stroke();\n\n    context.restore();\n}\n\nfunction svg(circleObject: Circle): string {\n    let circle = `cx=\"${circleObject.center.x}\" cy=\"${circleObject.center.y}\" r=\"${circleObject.radius}\"`;\n\n    if (circleObject.options?.fillColor) {\n        circle += ` fill=\"${circleObject.options.fillColor}\"`;            \n    } else {\n        circle += \" fill=\\\"none\\\"\";\n    }\n\n    if (circleObject.options?.borderColor) {\n        circle += ` stroke=\"${circleObject.options.borderColor}\"`;\n    }\n\n    if (circleObject.options?.thickness) {\n        circle += ` stroke-width=\"${circleObject.options.thickness}\"`;\n    }\n        \n    if (circleObject.options?.dash) {\n        circle += ` stroke-dasharray=\"${circleObject.options.dash.join(\",\")}\"`;\n    }\n\n    return `<circle ${circle} />`;\n}\n\nexport default class Circle implements IDraw {\n    constructor(\n        public readonly center: Point,\n        public readonly radius: number,\n        public readonly options?: {\n            readonly fillColor?: string,\n            readonly borderColor?: string,\n            readonly thickness?: number,\n            readonly dash?: number[],\n        }\n    ) {}\n    draw(): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this): svg(this);\n    }\n    \n}","import { IDraw } from \"./IDraw\";\nimport Point from \"./Point\";\n\nexport interface IFontStyle {\n    family?: string,\n    size?: string,\n    weight?: string,\n    style?: string,\n    kerning?: CanvasFontKerning\n    stretch?: CanvasFontStretch,\n    variant?: CanvasFontVariantCaps,\n    lineHeight?: string\n}\n\nfunction fontStyleToString(fontStyle: IFontStyle): string {\n    let font = \"\";\n    if (fontStyle.style) {\n        font = `${fontStyle.style} `;\n    }\n    if (fontStyle.variant) {\n        font += `${fontStyle.variant} `;\n    }\n    if (fontStyle.weight) {\n        font += `${fontStyle.weight} `;\n    }\n    if (fontStyle.stretch) {\n        font += `${fontStyle.stretch} `;\n    }\n    if (fontStyle.size) {\n        font += `${fontStyle.size} `;\n    }    \n    if (fontStyle.lineHeight) {\n        font += `${fontStyle.lineHeight} `;\n    }\n    if (fontStyle.family) {\n        font += `${fontStyle.family}`;\n    }\n    return font.trim();\n}\n\nfunction drawingContext(context: CanvasRenderingContext2D, text: Text): void {\n    context.save();\n\n    if (text.options?.color) {\n        context.fillStyle = text.options.color;\n    }\n\n    if (text.options?.font) {\n        context.font = fontStyleToString(text.options.font);\n    }\n\n    if (text.options?.text) {\n        context.textAlign = text.options.text.align;\n        context.textBaseline = text.options.text.baseline;\n    }\n    \n    if (text.options?.rotate) {\n        context.translate(\n            text.coordinates.x,\n            text.coordinates.y\n        );\n        context.rotate(text.options.rotate * Math.PI / 180);\n        context.fillText(\n            text.text,\n            0,\n            0\n        );\n    } else {\n        context.fillText(\n            text.text,\n            text.coordinates.x,\n            text.coordinates.y\n        );\n    }\n    context.restore();\n}\n\nfunction svg(textObject: Text): string {\n    let text;\n        \n    if (textObject.options?.rotate) {\n        text = `x=\"0\" y=\"0\" transform=\"translate(${textObject.coordinates.x}, ${textObject.coordinates.y}) rotate(${textObject.options.rotate})\"`;\n    } else {\n        text = `x=\"${textObject.coordinates.x}\" y=\"${textObject.coordinates.y}\"`;\n    }\n\n    if (textObject.options?.color) {\n        text += ` fill=\"${textObject.options.color}\"`;\n    }\n\n    if (textObject.options?.font?.family) {\n        text += ` font-family=\"${textObject.options.font.family}\"`;\n    }\n\n    if (textObject.options?.font?.size) {\n        text += ` font-size=\"${textObject.options.font.size}\"`;\n    }\n\n    if (textObject.options?.font?.style) {\n        text += ` font-style=\"${textObject.options.font.style}\"`;\n    }\n\n    if (textObject.options?.font?.weight) {\n        text += ` font-weight=\"${textObject.options.font.weight}\"`;\n    }\n\n    if (textObject.options?.font?.variant) {\n        text += ` font-variant=\"${textObject.options.font.variant}\"`;\n    }\n\n    if (textObject.options?.font?.stretch) {\n        text += ` font-stretch=\"${textObject.options.font.stretch}\"`;\n    }\n\n    if (textObject.options?.font?.kerning) {\n        text += ` font-kerning=\"${textObject.options.font.kerning}\"`;\n    }\n\n    // text align\n\n    switch(textObject.options?.text?.align) {\n    case \"center\":\n        text += \" text-anchor=\\\"middle\\\"\";\n        break;\n    case \"right\":\n    case \"end\":\n        text += \" text-anchor=\\\"end\\\"\";\n        break;\n    default:\n        text += \" text-anchor=\\\"start\\\"\";\n    }\n\n    // text baseline\n\n    switch(textObject.options?.text?.baseline) {\n    case \"top\":\n    case \"hanging\":\n        text += \" dominant-baseline=\\\"hanging\\\"\";\n        break;\n    case \"alphabetic\":\n        text += \" dominant-baseline=\\\"alphabetic\\\"\";\n        break;\n    case \"ideographic\":\n        text += \" dominant-baseline=\\\"ideographic\\\"\";\n        break;\n    case \"middle\":\n        text += \" dominant-baseline=\\\"middle\\\"\";\n        break;\n    default:\n        text += \" dominant-baseline=\\\"auto\\\"\";\n    }\n    \n    return `<text ${text}>${textObject.text}</text>`;\n}\n\nexport default class Text implements IDraw {\n    constructor(\n        public readonly coordinates: Point,\n        public readonly text: string,\n        public readonly options?: {\n            readonly color?: string,\n            readonly font?: IFontStyle,\n            readonly text?: {\n                align: CanvasTextAlign,\n                baseline: CanvasTextBaseline,\n            },\n            readonly rotate?: number\n        }\n    ) {}\n\n    draw(): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(context?: CanvasRenderingContext2D): string | void {\n        return context ? drawingContext(context, this) : svg(this);\n    }\n    \n    static measure(\n        context: CanvasRenderingContext2D,\n        text: string,\n        font?: IFontStyle\n    ): TextMetrics {\n        if (font) {\n            context.save();\n            context.font = fontStyleToString(font);\n        }\n\n        const result = context.measureText(text);\n\n        if (font) {\n            context.restore();\n        }\n        \n        return result;\n    }\n\n    static fitIntoBox(\n        context: CanvasRenderingContext2D,\n        text: string,\n        boxSize: { width: number, height: number },\n        font?: IFontStyle\n    ): number {\n        context.save();\n    \n        if (font) {\n            context.font = fontStyleToString(font);\n        }\n\n        const fontString = context.font.split(\" \");\n\n        const index = fontString.findIndex(item => /\\d+px/.test(item.trim()));\n\n        if (index === -1) {\n            throw new Error(\"Font size does not found in an image context\");\n        }\n        \n        let number = parseInt(fontString[index]);\n    \n        if (!number) {\n            throw new Error(\"Font size does not found in an image context\");\n        }\n\n        const updateFont = () => {\n            fontString[index] = `${number}px`;\n            context.font = fontString.join(\" \");\n        };\n\n        const getTextWidth = (text: string) => context.measureText(text).width;\n\n        const getTextHeight = (text: string) => context.measureText(text).actualBoundingBoxAscent + context.measureText(text).actualBoundingBoxDescent;\n\n        if (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {            \n            // decrease            \n            while(getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n                number--;\n                updateFont();\n            }\n        } else {\n            // increase\n            while(getTextWidth(text) < boxSize.width && getTextHeight(text) < boxSize.height) {\n                number++;\n                updateFont();\n            }\n            if (getTextWidth(text) > boxSize.width || getTextHeight(text) > boxSize.height) {\n                number--;\n            }\n        }\n        \n        context.restore();\n\n        return number;\n    }\n}\n","import { IDraw } from \"./IDraw\";\n\nfunction drawingContext(context: CanvasRenderingContext2D, builder: Builder): void {\n    builder.shapes.forEach(shape => shape.draw(context));\n}\n\nfunction svg(width: number, height: number, builder: Builder): string {\n    return `<svg width=\"${width}\" height=\"${height}\">\\n${builder.shapes.map(item => item.draw()).join(\"\\n\")}\\n</svg>`;\n}\nexport interface IBuilder {\n    draw(width: number, height: number): string;\n    draw(context: CanvasRenderingContext2D): void;\n}\n\nexport default class Builder implements IBuilder {\n    constructor(public readonly shapes: IDraw[]) {}\n\n    draw(width: number, height: number): string;\n    draw(context: CanvasRenderingContext2D): void;\n    draw(width: number | CanvasRenderingContext2D, height?: number): string | void {\n        \n        if (typeof width === \"function\" ||  typeof width === \"object\") {\n            return drawingContext(width, this);\n        }\n\n        if (typeof width === \"number\" && typeof height === \"number\") {\n            return svg(width, height, this);\n        }\n\n        throw new TypeError(\"Wrong arguments.\");\n    }\n}\n"],"names":["drawingContext","svg"],"mappings":"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"}